// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios12.4-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KochavaCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import KochavaCore
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import os.log
import os
extension Swift.Array : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  public static func kva_from(_ object: Any?) -> Swift.Array<Element>?
  public static func kva_from(_ object: Any?, elementClass: Swift.AnyClass? = nil, initializedObject: Any? = nil) -> Swift.Array<Element>?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
}
extension Swift.Array {
  public mutating func kva_append(nullable newElement: Element?)
  public mutating func kva_append<S>(contentsOf_nullable newElements: S?) where Element == S.Element, S : Swift.Sequence
}
extension Swift.Bool : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  public static func kva_from(_ object: Any?) -> Swift.Bool?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  public static func kva_enabledDisabledString(_ bool: Swift.Bool?) -> Swift.String?
}
extension Foundation.Date : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  public static func kva_from(applePrintDateString string: Swift.String?) -> Foundation.Date?
  public static func kva_from(iso8601DateString string: Swift.String?) -> Foundation.Date?
  public static func kva_from(iso8601ShortDateString string: Swift.String?) -> Foundation.Date?
  public static func kva_from(string: Swift.String?) -> Foundation.Date?
  public static func kva_date(fromYYYYMMDDDateString string: Swift.String?) -> Foundation.Date?
  public static func kva_from(_ object: Any?) -> Foundation.Date?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  public static func kva_earliestDate(date1: Foundation.Date?, date2: Foundation.Date?) -> Foundation.Date?
  public func kva_unixTime() -> Swift.UInt64
  public func kva_unixTimeDecimalNumber() -> Foundation.NSDecimalNumber
  public func kva_unixTimeMilliseconds() -> Swift.UInt64
  public func kva_unixTimeString() -> Swift.String
  public func kva_iso8601DateString() -> Swift.String
  public func kva_iso8601ShortDateString() -> Swift.String
  public func kva_string(dateStyle: Foundation.DateFormatter.Style, timeStyle: Foundation.DateFormatter.Style) -> Swift.String
  public func kva_yyyymmddDateString() -> Swift.String
  public func kva_agoTimeInterval() -> Foundation.TimeInterval
}
@_hasMissingDesignatedInitializers @objc(KVAPrivacyProfile) final public class KVAPrivacyProfile : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAExecutable, KochavaCore.KVAFromProtocol, KochavaCore.KVANetworkingSetterProvider {
  @objc(registerWithName:payloadKeyStringArray:) public static func register(name: KochavaCore.KVAPrivacyProfile.Name, payloadKeyStringArray: [Swift.String]?)
  @available(*, deprecated, renamed: "register(name:payloadKeyStringArray:)", message: "Modern Objective-C-style method deprecated.  Use Swift func register(name:payloadKeyStringArray:) instead.")
  @objc(registerWithNameString:payloadKeyStringArray:) public static func register(withNameString nameString: Swift.String, payloadKeyStringArray: [Swift.String]?)
  @objc(registerWithName:payloadKeyStringArray:registrarArray:) public static func register(name: KochavaCore.KVAPrivacyProfile.Name, payloadKeyStringArray: [Swift.String]?, registrarArray: [KochavaCore.KVAPrivacyProfileRegistrarProvider]?)
  @available(*, deprecated, renamed: "register(name:payloadKeyStringArray:registrarArray:)", message: "Modern Objective-C-style method deprecated.  Use Swift func register(name:payloadKeyStringArray:registrarArray:) instead.")
  @objc(registerWithNameString:payloadKeyStringArray:registrarArray:) public static func register(withNameString nameString: Swift.String, payloadKeyStringArray: [Swift.String]?, registrarArray: [KochavaCore.KVAPrivacyProfileRegistrarProvider]?)
  @objc(registerWithName:payloadKeyStringArray:payloadIdStringArray:registrarArray:) public static func register(name: Swift.String, payloadKeyStringArray: [Swift.String]?, payloadIdStringArray: [Swift.String]?, registrarArray: [KochavaCore.KVAPrivacyProfileRegistrarProvider]?)
  public static func kva_from(_ object: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  final public func execute()
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  @objc final public let name: KochavaCore.KVAPrivacyProfile.Name
  public typealias Name = Swift.String
  @objc weak final public var networking: KochavaCore.KVANetworking?
  @objc final public let payloadKeyStringArray: [Swift.String]?
  @objc final public let payloadIdStringArray: [Swift.String]?
  @objc final public var sleepBool: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc public protocol KVAPrivacyProfileRegistrar {
  @objc(registerProfile:) func register(profile: KochavaCore.KVAPrivacyProfile)
}
@objc public protocol KVAPrivacyProfileRegistrarProvider {
  @objc var privacyProfileRegistrar: KochavaCore.KVAPrivacyProfileRegistrar { get }
}
extension Swift.Int : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  public static func kva_from(_ object: Any?) -> Swift.Int?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
}
@objc(KVAAdapter) final public class KVAAdapter : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAConfigureWithProtocol, KochavaCore.KVAExecutable, KochavaCore.KVAFromProtocol, KochavaCore.KVAFromWithInitializedObjectProtocol, KochavaCore.KVAKeyable, KochavaCore.KVAMutable, KochavaCore.KVANetworkingSetterProvider, KochavaCore.KVAInvalidatable {
  required public init(networking: KochavaCore.KVANetworking? = nil, baseIdentifier: KochavaCore.KVAAdapter.Identifier? = nil, identifier: KochavaCore.KVAAdapter.Identifier, universalIdentifier: KochavaCore.KVAAdapter.UniversalIdentifier? = nil, key: Swift.AnyHashable? = nil, denyDatapointCheckBool: Swift.Bool = false, persistBool: Swift.Bool = false, watchBool: Swift.Bool = false, allowValueArray: [Any]? = nil, interfaceInDictionary: [Swift.AnyHashable : Any]? = nil, maximumStalenessTimeInterval: Foundation.TimeInterval? = nil, valueDefaultObject: Any? = nil, valueObject: Any? = nil, closure_didInvalidate: KochavaCore.KVAAdapter.Closure_DidInvalidate? = nil, closure_didMutate: KochavaCore.KVAAdapter.Closure_DidMutate? = nil, closure_didReadFromPersistentStorage: KochavaCore.KVAAdapter.Closure_DidReadFromPersistentStorage? = nil, closure_didSetCachedValueOnSameThread: KochavaCore.KVAAdapter.Closure_DidSetValue? = nil, closure_didSetValue: KochavaCore.KVAAdapter.Closure_DidSetValue? = nil, closure_valueMetaValueArrayDictionary: KochavaCore.KVAValue.Closure_MetaValueArrayDictionary? = nil, closure_valueStaleBool: KochavaCore.KVAValue.Closure_StaleBool? = nil, closure_value_willSet: KochavaCore.KVAAdapter.Closure_Value_WillSet? = nil, closure_serverObject: KochavaCore.KVAAdapter.Closure_ServerObject? = nil, closure_collectSynchronously: KochavaCore.KVAAdapter.Closure_CollectSynchronously? = nil, closure_collectAsynchronously: KochavaCore.KVAAdapter.Closure_CollectAsynchronously? = nil)
  required public init(networking: KochavaCore.KVANetworking? = nil, baseIdentifier: KochavaCore.KVAAdapter.Identifier? = nil, identifier: KochavaCore.KVAAdapter.Identifier, universalIdentifier: KochavaCore.KVAAdapter.UniversalIdentifier? = nil, nameString: Swift.String? = nil, descriptionString: Swift.String? = nil, key: Swift.AnyHashable? = nil, product: KochavaCore.KVAProduct? = nil, productRegisterBool: Swift.Bool = false, storageIdentifier: KochavaCore.KVANetworking.StorageIdentifier? = nil, denyDatapointCheckBool: Swift.Bool = false, asynchronousCollectionPrerequisiteTaskIdentifierArray: [Swift.String]? = nil, asynchronousCollectionPrerequisiteTaskArrayIncludeNetworkingStartedBool: Swift.Bool? = nil, persistBool: Swift.Bool = false, persistAggressiveBool: Swift.Bool = false, persistIdentifier: KochavaCore.KVAAdapter.PersistIdentifier? = nil, persistUserDefaultsTypeString: Swift.String? = nil, persistWritesLogMessagesPrintBool: Swift.Bool? = nil, persistWritesWaitTimeInterval: Foundation.TimeInterval? = nil, watchBool: Swift.Bool = false, allowValueArray: [Any]? = nil, interfaceInDictionary: [Swift.AnyHashable : Any]? = nil, maximumStalenessTimeInterval: Foundation.TimeInterval? = nil, mutatorDidMutatePassesToDelegateBool: Swift.Bool? = nil, mutatorMutableDelegate: KochavaCore.KVAMutable? = nil, valueClass: Swift.AnyClass? = nil, valueElementClass: Swift.AnyClass? = nil, valueMinimumObject: Any? = nil, valueMaximumObject: Any? = nil, valueDefaultObject: Any? = nil, valueInitializedObject: Any? = nil, valueObject: Any? = nil, touchlessValue: KochavaCore.KVAValue? = nil, closure_didInvalidate: KochavaCore.KVAAdapter.Closure_DidInvalidate? = nil, closure_didMutate: KochavaCore.KVAAdapter.Closure_DidMutate? = nil, closure_didReadFromPersistentStorage: KochavaCore.KVAAdapter.Closure_DidReadFromPersistentStorage? = nil, closure_didSetCachedValueOnSameThread: KochavaCore.KVAAdapter.Closure_DidSetValue? = nil, closure_didSetValue: KochavaCore.KVAAdapter.Closure_DidSetValue? = nil, closure_validatedObject: KochavaCore.KVAAdapter.Closure_ValidatedObject? = nil, closure_valueMetaValueArrayDictionary: KochavaCore.KVAValue.Closure_MetaValueArrayDictionary? = nil, closure_valueStaleBool: KochavaCore.KVAValue.Closure_StaleBool? = nil, closure_value_willSet: KochavaCore.KVAAdapter.Closure_Value_WillSet? = nil, closure_serverObject: KochavaCore.KVAAdapter.Closure_ServerObject? = nil, closure_collectSynchronously: KochavaCore.KVAAdapter.Closure_CollectSynchronously? = nil, closure_collectAsynchronously: KochavaCore.KVAAdapter.Closure_CollectAsynchronously? = nil)
  @objc deinit
  public static func kva_from(_ object: Any?) -> Self?
  public static func kva_from(_ object: Any?, initializedObject: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  final public func key(forContext context: KochavaCore.KVAContext?) -> Swift.AnyHashable?
  final public func kva_configure(with object: Any?, context: KochavaCore.KVAContext?)
  final public func execute()
  final public func invalidate()
  @objc override final public var description: Swift.String {
    @objc get
  }
  @discardableResult
  final public func value(forContext context: KochavaCore.KVAContext?, waitBool: Swift.Bool, closure_didComplete: KochavaCore.KVAAdapter.Closure_Value_DidComplete?) -> KochavaCore.KVAValue?
  @discardableResult
  final public func value(forContext context: KochavaCore.KVAContext?, touchlessBool: Swift.Bool, waitBool: Swift.Bool, closure_didComplete: KochavaCore.KVAAdapter.Closure_Value_DidComplete?) -> KochavaCore.KVAValue?
  final public func value_freshen()
  final public func valueWillBeCollectedBool(forContext context: KochavaCore.KVAContext?) -> Swift.Bool
  final public func validatedObject(forAnyObject anyObject: Any?, reportingContextNameString: Swift.String) -> Swift.AnyObject?
  final public func mayShareBool(forContext context: KochavaCore.KVAContext?) -> Swift.Bool
  final public func persistentStorage_restore() -> Swift.Bool
  final public func persistentStorage_writeIfDidMutateBool(aggressiveBool: Swift.Bool? = nil)
  final public var asynchronousCollectionTask: KochavaCore.KVATask {
    get
  }
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  public typealias Closure_CollectAsynchronously = (_ adapter: KochavaCore.KVAAdapter, _ closure_didComplete: @escaping KochavaCore.KVAAdapter.Closure_CollectAsynchronously_DidComplete) -> Swift.Void
  public typealias Closure_CollectAsynchronously_DidComplete = (_ adapter: KochavaCore.KVAAdapter, _ valueRawObject: Any?) -> Swift.Void
  final public var asynchronousCollectionPrerequisiteTaskArray: [KochavaCore.KVATask]?
  final public var asynchronousCollectionPrerequisiteTaskIdentifierArray: [KochavaCore.KVATask.Identifier]?
  final public var asynchronousCollectionPrerequisiteTaskArrayIncludeNetworkingStartedBool: Swift.Bool {
    get
    set(asynchronousCollectionPrerequisiteTaskArrayIncludeNetworkingStartedBool)
  }
  final public var asynchronousCollectionPrerequisiteTaskArrayIncludeNetworkingStartedBool_optional: Swift.Bool? {
    get
    set(asynchronousCollectionPrerequisiteTaskArrayIncludeNetworkingStartedBool_optional)
  }
  public typealias Closure_CollectSynchronously = (_ adapter: KochavaCore.KVAAdapter) -> Swift.AnyObject?
  final public var closure_didInvalidate: KochavaCore.KVAAdapter.Closure_DidInvalidate?
  public typealias Closure_DidInvalidate = (_ adapter: KochavaCore.KVAAdapter) -> Swift.Void
  final public var closure_didMutate: KochavaCore.KVAAdapter.Closure_DidMutate?
  public typealias Closure_DidMutate = (_ adapter: KochavaCore.KVAAdapter) -> Swift.Void
  final public var closure_didReadFromPersistentStorage: KochavaCore.KVAAdapter.Closure_DidReadFromPersistentStorage?
  public typealias Closure_DidReadFromPersistentStorage = (_ adapter: KochavaCore.KVAAdapter) -> Swift.Void
  final public var closure_didSetCachedValueOnSameThread: KochavaCore.KVAAdapter.Closure_DidSetValue?
  final public var closure_didSetValue: KochavaCore.KVAAdapter.Closure_DidSetValue?
  public typealias Closure_DidSetValue = (_ adapter: KochavaCore.KVAAdapter, _ value: KochavaCore.KVAValue?, _ oldValue: KochavaCore.KVAValue?) -> Swift.Void
  public typealias Closure_ServerObject = (_ adapter: KochavaCore.KVAAdapter, _ valueObject: Swift.AnyObject?) -> Swift.AnyObject?
  public typealias Closure_ValidatedObject = (_ adapter: KochavaCore.KVAAdapter, _ any: Any?, _ reportingContextNameString: Swift.String, _ valueMinimumObject: Any?, _ valueMaximumObject: Any?) -> Swift.AnyObject?
  final public var closure_valueMetaValueArrayDictionary: KochavaCore.KVAValue.Closure_MetaValueArrayDictionary?
  final public var closure_valueStaleBool: KochavaCore.KVAValue.Closure_StaleBool?
  final public var closure_value_willSet: KochavaCore.KVAAdapter.Closure_Value_WillSet?
  public typealias Closure_Value_WillSet = (_ adapter: KochavaCore.KVAAdapter, _ value: KochavaCore.KVAValue?, _ newValue: KochavaCore.KVAValue?) -> Swift.Bool
  final public var descriptionString: Swift.String? {
    get
    set(descriptionString)
  }
  final public var key: Swift.AnyHashable? {
    get
    set(key)
  }
  final public var identifier: KochavaCore.KVAAdapter.Identifier {
    get
  }
  public typealias Identifier = Swift.String
  final public var maximumStalenessTimeInterval: Foundation.TimeInterval? {
    get
    set(maximumStalenessTimeInterval)
  }
  final public var nameString: Swift.String? {
    get
    set(nameString)
  }
  @objc weak final public var networking: KochavaCore.KVANetworking? {
    @objc get
    @objc set(networking)
  }
  public typealias PersistIdentifier = Swift.String
  final public var persistUserDefaultsTypeString: Swift.String?
  final public var product: KochavaCore.KVAProduct? {
    get
    set(product)
  }
  final public var storageIdentifier: KochavaCore.KVANetworking.StorageIdentifier? {
    get
    set(storageIdentifier)
  }
  final public var universalIdentifier: KochavaCore.KVAAdapter.UniversalIdentifier? {
    get
    set(universalIdentifier)
  }
  public typealias UniversalIdentifier = Swift.AnyHashable
  final public var valueInitializedObject: Any? {
    get
    set(valueInitializedObject)
  }
  final public var valueObject: Swift.AnyObject? {
    get
    set(valueObject)
  }
  final public var watchBool: Swift.Bool {
    get
  }
  final public var watchValueObject: Swift.AnyObject? {
    get
    set(watchValueObject)
  }
  final public var asynchronousCollectionInProgressBool: Swift.Bool {
    get
  }
  public typealias Closure_Value_DidComplete = (_ adapter: KochavaCore.KVAAdapter, _ value: KochavaCore.KVAValue?) -> Swift.Void
  final public var consent: KochavaCore.KVAConsent? {
    get
    set(consent)
  }
  final public var touchlessValue: KochavaCore.KVAValue? {
    get
    set(touchlessValue)
  }
  final public var touchlessValueObject: Swift.AnyObject? {
    get
    set(touchlessValueObject)
  }
  final public var value: KochavaCore.KVAValue? {
    get
    set(value)
  }
  public typealias Closure_Value_DidSet = (_ adapter: KochavaCore.KVAAdapter) -> Swift.Void
  final public var valueRawObject: Swift.AnyObject? {
    get
    set(valueRawObject)
  }
  final public var watchValue: KochavaCore.KVAValue? {
    get
    set(watchValue)
  }
  final public func watchValueIndicatesChangeBool() -> Swift.Bool
  final public var watchValueRawObject: Swift.AnyObject? {
    get
    set(watchValueRawObject)
  }
  public static let closure_serverObject_boolNumber: (_ adapter: KochavaCore.KVAAdapter, _ valueObject: Swift.AnyObject?) -> Swift.AnyObject?
  public static let closure_serverObject_default: (_ adapter: KochavaCore.KVAAdapter, _ valueObject: Swift.AnyObject?) -> Swift.AnyObject?
  public static let closure_serverObject_deviceToken: (_ adapter: KochavaCore.KVAAdapter, _ valueObject: Swift.AnyObject?) -> Swift.AnyObject?
  public static let closure_serverObject_fourDecimal: (_ adapter: KochavaCore.KVAAdapter, _ valueObject: Swift.AnyObject?) -> Swift.AnyObject?
  public static let closure_serverObject_nil: (_ adapter: KochavaCore.KVAAdapter, _ valueObject: Swift.AnyObject?) -> Swift.AnyObject?
  public static let closure_serverObject_unixTime: (_ adapter: KochavaCore.KVAAdapter, _ valueObject: Swift.AnyObject?) -> Swift.AnyObject?
  public static let closure_serverObject_unixTimeMilliseconds: (_ adapter: KochavaCore.KVAAdapter, _ valueObject: Swift.AnyObject?) -> Swift.AnyObject?
  public static let closure_serverObject_unixTimeWithDecimalPrecision: (_ adapter: KochavaCore.KVAAdapter, _ valueObject: Swift.AnyObject?) -> Swift.AnyObject?
  public static let closure_serverObject_timeInterval: (_ adapter: KochavaCore.KVAAdapter, _ valueObject: Swift.AnyObject?) -> Swift.AnyObject?
  public static let closure_serverObject_utf8EncodedString: (_ adapter: KochavaCore.KVAAdapter, _ valueObject: Swift.AnyObject?) -> Swift.AnyObject?
  public static let stalenessNeverTimeInterval: Foundation.TimeInterval?
  public static let stalenessImmediateTimeInterval: Swift.Double
}
@_inheritsConvenienceInitializers @objc(KVAAppGroups) final public class KVAAppGroups : ObjectiveC.NSObject {
  @objc public static var shared: KochavaCore.KVAAppGroups {
    @objc get
  }
  @objc public static var shared_optional: KochavaCore.KVAAppGroups? {
    @objc get
  }
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  @objc(deviceAppGroupIdentifier) final public var deviceAppGroupIdentifier: KochavaCore.KVAAppGroups.Identifier? {
    @objc get
    @objc set(deviceAppGroupIdentifier)
  }
  public typealias Identifier = Swift.String
  public static let deviceAppGroupIdentifierDidMutateNotificationName: Foundation.Notification.Name
  @objc override dynamic public init()
  @objc deinit
}
public protocol KVAAsForContextProtocol {
  func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(KVABackgroundTaskController) final public class KVABackgroundTaskController : ObjectiveC.NSObject {
  public static let shared: KochavaCore.KVABackgroundTaskController
  public static var sharedInstance: Swift.AnyObject {
    get
  }
  final public func didBeginBackgroundSustainingTask(identifier: KochavaCore.KVABackgroundTaskController.Identifier)
  public typealias Identifier = Swift.String
  final public func didEndBackgroundSustainingTask(identifier: KochavaCore.KVABackgroundTaskController.Identifier)
  @objc deinit
}
@objc(KVACollection) final public class KVACollection : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  required public init(identifier: KochavaCore.KVACollection.Identifier? = nil, closure_willRegisterObject: KochavaCore.KVACollection.Closure_WillRegisterObject? = nil)
  convenience public init(adapter: KochavaCore.KVAAdapter?)
  convenience public init(object: Any?, identifier: KochavaCore.KVACollection.ElementIdentifier)
  convenience public init(value: KochavaCore.KVAValue?, identifier: KochavaCore.KVACollection.ElementIdentifier)
  public static func kva_from(_ object: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  final public func append(collection: KochavaCore.KVACollection?)
  final public func register(adapter: KochavaCore.KVAAdapter?)
  final public func register(netTransaction: KochavaCore.KVANetTransaction?)
  final public func register(object: Any?, identifier: KochavaCore.KVACollection.ElementIdentifier?)
  final public func register(task: KochavaCore.KVATask?)
  final public func register(value: KochavaCore.KVAValue?, identifier: KochavaCore.KVACollection.ElementIdentifier)
  final public func register(valueSource: Any?, identifier: KochavaCore.KVACollection.ElementIdentifier)
  final public func unregisterObject(withIdentifier identifier: KochavaCore.KVACollection.ElementIdentifier)
  final public func enumerate(closure: KochavaCore.KVACollection.Closure_Enumerate_Element?)
  public typealias Closure_Enumerate_Element = (_ identifier: KochavaCore.KVACollection.Identifier?, _ object: Any?, _ stopBool: Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>?) -> Swift.Void?
  final public func adapter(withIdentifier identifier: KochavaCore.KVAAdapter.Identifier?) -> KochavaCore.KVAAdapter?
  final public func netTransaction(withIdentifier identifier: KochavaCore.KVANetTransaction.Identifier?) -> KochavaCore.KVANetTransaction?
  final public func object(withIdentifier identifier: KochavaCore.KVACollection.ElementIdentifier?) -> Any?
  final public func objectArray(withIdentifierArray identifierArray: [KochavaCore.KVACollection.ElementIdentifier]?) -> [Any]?
  final public func task(withIdentifier identifier: KochavaCore.KVATask.Identifier? = nil, withUniversalIdentifier universalIdentifier: KochavaCore.KVATask.UniversalIdentifier? = nil) -> KochavaCore.KVATask?
  final public func valueSource(withIdentifier identifier: KochavaCore.KVACollection.ElementIdentifier?) -> Any?
  final public func count() -> Swift.Int
  public static func valueArrayDictionary(fromValueSourceCollectionArray valueSourceCollectionArray: [KochavaCore.KVACollection]?, optionalAppendToValueArrayMutableDictionary: [KochavaCore.KVACollection.ElementIdentifier : KochavaCore.KVAValue]?, context: KochavaCore.KVAContext?, closure_didComplete: KochavaCore.KVACollection.Closure_ValueArrayDictionary_DidComplete?)
  public typealias Closure_ValueArrayDictionary_DidComplete = (_ valueSourceCollectionArray: [KochavaCore.KVACollection]?, _ valueArrayDictionary: [KochavaCore.KVAValue.SourceIdentifier : KochavaCore.KVAValue]?) -> Swift.Void
  final public func printDirectory(logLevel: KochavaCore.KVALogLevel? = .info)
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  public typealias Identifier = Swift.String
  public typealias Closure_WillRegisterObject = (_ collection: KochavaCore.KVACollection, _ object: Any) -> Swift.Void
  public typealias ElementIdentifier = Swift.String
  @objc deinit
}
public protocol KVAConfigureWithProtocol {
  func kva_configure(with object: Any?, context: KochavaCore.KVAContext?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(KVAConsent) final public class KVAConsent : ObjectiveC.NSObject, Foundation.NSCopying, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAConfigureWithProtocol, KochavaCore.KVAFromProtocol, KochavaCore.KVAFromWithInitializedObjectProtocol, KochavaCore.KVAInvalidatable, KochavaCore.KVAMutable {
  convenience public init(fromObject object: Any?, networking: KochavaCore.KVANetworking, creationLogMessagesPrintBool: Swift.Bool = true, delegate: KochavaCore.KVAMutable, closure_didMutate: KochavaCore.KVAConsent.Closure_DidMutate?)
  @objc(copyWithZone:) final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public static func kva_from(_ object: Any?) -> Self?
  public static func kva_from(_ object: Any?, initializedObject: Any?) -> Self?
  @objc(kva_asForContext:) final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  final public func configure(networking: KochavaCore.KVANetworking, masterBool: Swift.Bool, delegate: KochavaCore.KVAMutable, closure_didMutate: KochavaCore.KVAConsent.Closure_DidMutate?)
  final public func kva_configure(with object: Any?, context: KochavaCore.KVAContext?)
  final public func invalidate()
  @objc final public func mayCollectBool() -> Swift.Bool
  @objc final public func mayPersistBool() -> Swift.Bool
  @objc final public func mayShareBool() -> Swift.Bool
  @objc final public func mayKeepBool() -> Swift.Bool
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  public typealias Closure_DidMutate = (_ newConsent: KochavaCore.KVAConsent, _ oldConsent: KochavaCore.KVAConsent) -> Swift.Void
  @objc final public var gdprAppliesBool: Swift.Bool {
    @objc get
  }
  @objc final public var gdprEnabledBool: Swift.Bool {
    @objc get
  }
  final public var enabledBool: Swift.Bool {
    get
  }
  final public var grantedBool: Swift.Bool? {
    get
    set(grantedBool)
  }
  @objc final public var grantedBoolNumber: Foundation.NSNumber? {
    @objc get
    @objc set(grantedBoolNumber)
  }
  final public var grantedBool_sf: Swift.Bool? {
    get
    set(grantedBool)
  }
  @objc final public var grantedDate: Foundation.Date? {
    @objc get
  }
  @objc final public var requiredBool: Swift.Bool {
    @objc get
  }
  @objc final public var responseDate: Foundation.Date? {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(KVAContext) final public class KVAContext : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  @objc public static let host: KochavaCore.KVAContext
  @objc public static let log: KochavaCore.KVAContext
  @objc public static let persistentStorage: KochavaCore.KVAContext
  @objc public static let sdk: KochavaCore.KVAContext
  @objc public static let server: KochavaCore.KVAContext
  @objc public static let serverUnrestricted: KochavaCore.KVAContext
  public static func kva_from(_ object: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  @objc override final public var description: Swift.String {
    @objc get
  }
  public static func comparisonBools(_ context: KochavaCore.KVAContext?) -> (isHostBool: Swift.Bool, isLogBool: Swift.Bool, isPersistentStorageBool: Swift.Bool, isSDKBool: Swift.Bool, isServerBool: Swift.Bool, isUnknownBool: Swift.Bool)
  final public let comparisonBools: (isHostBool: Swift.Bool, isLogBool: Swift.Bool, isPersistentStorageBool: Swift.Bool, isSDKBool: Swift.Bool, isServerBool: Swift.Bool, isUnknownBool: Swift.Bool)
  final public let identifier: KochavaCore.KVAContext.Identifier
  public typealias Identifier = Swift.String
  final public let isHostBool: Swift.Bool
  final public let isLogBool: Swift.Bool
  final public let isPersistentStorageBool: Swift.Bool
  final public let isSDKBool: Swift.Bool
  final public let isServerBool: Swift.Bool
  final public let universalIdentifier: KochavaCore.KVAContext.UniversalIdentifier
  public typealias UniversalIdentifier = Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(KVACoreProduct) final public class KVACoreProduct : KochavaCore.KVAProduct, KochavaCore.KVASharedPropertyProvider {
  @objc public static let shared: KochavaCore.KVAProduct
  public static var sharedInstance: Swift.AnyObject {
    get
  }
  @objc required public init(apiVersionString: Swift.String?, buildDateString: Swift.String?, bundleIdentifier: KochavaCore.KVAProduct.BundleIdentifier?, bundleType: KochavaCore.KVAProduct.BundleType, compilerFlagNameArray: [Swift.String]? = nil, moduleName: KochavaCore.KVAProduct.ModuleName, name: KochavaCore.KVAProduct.Name, organizationName: KochavaCore.KVAProduct.OrganizationName, reverseDomainName: KochavaCore.KVAProduct.ReverseDomainName?, valueSourceCollection: KochavaCore.KVACollection?, versionString: Swift.String?, dependentProductClassNameStringArray: [Swift.String]? = nil, closure_resetClasses: KochavaCore.KVAProduct.Closure_ResetClasses? = nil, closure_resetVariables: KochavaCore.KVAProduct.Closure_ResetVariables? = nil, closure_didRegister: KochavaCore.KVAProduct.Closure_DidRegister? = nil)
  @objc deinit
}
extension Swift.Dictionary : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  public static func kva_from(_ object: Any?) -> Swift.Dictionary<Key, Value>?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  public func kva_asArray(forContext context: KochavaCore.KVAContext?) -> [Swift.AnyObject]?
  public func kva_stringKeysLowercasedDictionary() -> [Swift.AnyHashable : Any]
}
@_inheritsConvenienceInitializers @objc(KVADiagnostic) final public class KVADiagnostic : ObjectiveC.NSObject {
  public static func printHostAPICall(headlineString: Swift.String)
  public static func print(logLevel: KochavaCore.KVALogLevel?, headlineString: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(KVADictionaryEntryFormat) final public class KVADictionaryEntryFormat : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  public static func kva_from(_ object: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  final public var keyString: Swift.String? {
    get
  }
  final public var subChunkNameStringArray: [Swift.String]? {
    get
  }
  final public var valueClass: Swift.AnyClass? {
    get
  }
  final public var valueElementClass: Swift.AnyClass? {
    get
  }
  final public var valueObject: Any? {
    get
  }
  final public var valueSourceIdentifier: KochavaCore.KVAValue.SourceIdentifier? {
    get
  }
  final public var valueSourcePropertyNameString: Swift.String? {
    get
  }
  final public func valueUpdateBool_resolved() -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(KVADictionaryFormat) final public class KVADictionaryFormat : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  public static func kva_from(_ object: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  public static func appending(dictionaryFormat1: KochavaCore.KVADictionaryFormat?, dictionaryFormat2: KochavaCore.KVADictionaryFormat?) -> KochavaCore.KVADictionaryFormat?
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  final public var dictionaryEntryFormatArray: [KochavaCore.KVADictionaryEntryFormat]? {
    get
  }
  @objc deinit
}
@objc(KVADispatchQueue) final public class KVADispatchQueue : ObjectiveC.NSObject {
  @objc public static let globalConcurrent: KochavaCore.KVADispatchQueue
  @objc public static let globalSerial: KochavaCore.KVADispatchQueue
  @objc public static let main: KochavaCore.KVADispatchQueue
  public init(identifier: KochavaCore.KVADispatchQueue.Identifier, universalIdentifier: KochavaCore.KVADispatchQueue.UniversalIdentifier, osDispatchQueue: Dispatch.DispatchQueue)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc(asyncForPublicEntryPointWithSourceIdentifier:hostAPICallDiagnosticHeadlineString:sourceClass:closure:) public static func asyncForPublicEntryPoint(sourceIdentifier: KochavaCore.KVADispatchQueue.SourceIdentifier? = nil, hostAPICallDiagnosticHeadlineString: Swift.String?, sourceClass: Swift.AnyClass?, closure: (() -> Swift.Void)?)
  @objc(asyncWithSourceIdentifier:closure:) final public func async(sourceIdentifier: KochavaCore.KVADispatchQueue.SourceIdentifier? = nil, closure: (() -> Swift.Void)?)
  @objc(asyncWithSourceIdentifier:sourceClass:closure:) final public func async(sourceIdentifier: KochavaCore.KVADispatchQueue.SourceIdentifier?, sourceClass: Swift.AnyClass?, closure: (() -> Swift.Void)?)
  @objc(asyncAfterWithSourceIdentifier:timeInterval:closure:) final public func asyncAfter(sourceIdentifier: KochavaCore.KVADispatchQueue.SourceIdentifier?, timeInterval: Foundation.TimeInterval, closure: (() -> Swift.Void)?)
  @objc(asyncAfterWithNetworking:sourceIdentifier:prerequisiteTaskIdentifierArray:prerequisiteTaskArray:timeInterval:timeIntervalStartsAfterPrerequisiteTasksBool:closure:) final public func asyncAfter(networking: KochavaCore.KVANetworking?, sourceIdentifier: KochavaCore.KVADispatchQueue.SourceIdentifier?, prerequisiteTaskIdentifierArray: [Swift.String]? = nil, prerequisiteTaskArray: [KochavaCore.KVATask]? = nil, timeInterval: Foundation.TimeInterval, timeIntervalStartsAfterPrerequisiteTasksBool: Swift.Bool = false, closure: (() -> Swift.Void)?)
  @objc(asyncAfterSteppedSettlingDispatchWithSourceIdentifier:closure:) final public func asyncAfterSteppedSettlingDispatch(sourceIdentifier: KochavaCore.KVADispatchQueue.SourceIdentifier?, closure: (() -> Swift.Void)?)
  @objc(executeForPublicEntryPointWithSourceIdentifier:hostAPICallDiagnosticHeadlineString:sourceClass:logMessagePrintBool:asyncBool:closure:) public static func executeForPublicEntryPoint(sourceIdentifier: KochavaCore.KVADispatchQueue.SourceIdentifier?, hostAPICallDiagnosticHeadlineString: Swift.String?, sourceClass: Swift.AnyClass?, logMessagePrintBool: Swift.Bool, asyncBool: Swift.Bool, closure: (() -> Swift.Void)?)
  @objc(executeWithDispatchQueue:sourceIdentifier:hostAPICallDiagnosticHeadlineString:sourceClass:logMessagePrintBool:asyncBool:closure:) public static func execute(dispatchQueue: KochavaCore.KVADispatchQueue?, sourceIdentifier: KochavaCore.KVADispatchQueue.SourceIdentifier?, hostAPICallDiagnosticHeadlineString: Swift.String?, sourceClass: Swift.AnyClass?, logMessagePrintBool: Swift.Bool, asyncBool: Swift.Bool, closure: (() -> Swift.Void)?)
  final public let identifier: KochavaCore.KVADispatchQueue.Identifier
  public typealias Identifier = Swift.String
  final public let universalIdentifier: KochavaCore.KVADispatchQueue.UniversalIdentifier
  public typealias UniversalIdentifier = Swift.String
  final public let osDispatchQueue: Dispatch.DispatchQueue
  public typealias SourceIdentifier = Swift.String
  @objc deinit
}
@objc(KVAFile) final public class KVAFile : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  required public init?(resourceName: KochavaCore.KVAFile.ResourceName?, bundle: Foundation.Bundle?, searchPathDirectory: Foundation.FileManager.SearchPathDirectory?, extensionOverrideString: Swift.String?, subfolderNameStringArray: [Swift.String]?, remoteURLString: Swift.String?)
  convenience public init?(resourceName: KochavaCore.KVAFile.ResourceName?, bundle: Foundation.Bundle?)
  convenience public init?(resourceName: KochavaCore.KVAFile.ResourceName?, bundleIdentifier: KochavaCore.KVAProduct.BundleIdentifier?)
  public static func kva_from(_ object: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  @objc override final public var description: Swift.String {
    @objc get
  }
  final public func resolvedBundle() -> Foundation.Bundle
  final public func url(excludeFilenameBool: Swift.Bool! = false) -> Foundation.URL?
  final public func data() -> Foundation.Data?
  final public func dictionary() -> [Swift.AnyHashable : Any]?
  final public func jsonObject() -> Any?
  final public func object(class anyClass: Swift.AnyClass? = nil, elementClass: Swift.AnyClass? = nil, appendObject: Any? = nil) -> Swift.AnyObject?
  final public var resourceName: KochavaCore.KVAFile.ResourceName? {
    get
  }
  public typealias ResourceName = Swift.String
  final public var bundle: Foundation.Bundle? {
    get
  }
  final public var searchPathDirectory: Foundation.FileManager.SearchPathDirectory? {
    get
  }
  final public var extensionOverrideString: Swift.String? {
    get
  }
  final public var subfolderNameStringArray: [Swift.String]? {
    get
  }
  @objc deinit
}
public protocol KVASourceFileProvider {
  var sourceFile: KochavaCore.KVAFile? { get set }
}
public protocol KVAFromProtocol {
  static func kva_from(_ object: Any?) -> Self?
}
public protocol KVAFromWithInitializedObjectProtocol {
  static func kva_from(_ object: Any?, initializedObject: Any?) -> Self?
}
public protocol KVAInvalidatable : AnyObject {
  func invalidate()
}
public protocol KVAInvalidatableWithOptions : AnyObject {
  func invalidate(logMessagePrintBool: Swift.Bool, asyncBool: Swift.Bool)
}
public protocol KVAKeyable {
  func key(forContext context: KochavaCore.KVAContext?) -> Swift.AnyHashable?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(KVALog) final public class KVALog : ObjectiveC.NSObject {
  @objc public static let shared: KochavaCore.KVALog
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  @objc final public var level: KochavaCore.KVALogLevel? {
    @objc get
    @objc set(level)
  }
  @objc final public var osLogEnabledBool: Swift.Bool
  @objc final public var prettyPrintBool: Swift.Bool {
    @objc get
    @objc set(prettyPrintBool)
  }
  @objc final public var printLinesIndividuallyBool: Swift.Bool {
    @objc get
    @objc set(printLinesIndividuallyBool)
  }
  @objc final public var printPrefixString: Swift.String? {
    @objc get
    @objc set(printPrefixString)
  }
  @objc final public func logMessageArray_copy() -> [KochavaCore.KVALogMessage]?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(KVALogLevel) final public class KVALogLevel : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  @objc public static let never: KochavaCore.KVALogLevel
  @objc public static let error: KochavaCore.KVALogLevel
  @objc public static let warn: KochavaCore.KVALogLevel
  @objc public static let info: KochavaCore.KVALogLevel
  @objc public static let debug: KochavaCore.KVALogLevel
  @objc public static let trace: KochavaCore.KVALogLevel
  @objc public static let always: KochavaCore.KVALogLevel
  @objc public static func kva_from(_ object: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  @objc override final public var description: Swift.String {
    @objc get
  }
  public static func logLevel(_ logLevel: KochavaCore.KVALogLevel?, visibleBoolWithVisibleMaximumLogLevel visibleMaximumLogLevel: KochavaCore.KVALogLevel?) -> Swift.Bool
  @objc final public let identifier: KochavaCore.KVALogLevel.Identifier
  public typealias Identifier = Swift.String
  @objc final public let universalIdentifier: KochavaCore.KVALogLevel.UniversalIdentifier
  public typealias UniversalIdentifier = Swift.String
  @objc deinit
}
@objc(KVALogMessage) final public class KVALogMessage : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAExecutable, KochavaCore.KVAFromProtocol, KochavaCore.KVAPrintable {
  public static func print(_ headlineString: Swift.String?)
  public static func print(logLevel: KochavaCore.KVALogLevel?, sourceIdentifier: KochavaCore.KVALogMessage.SourceIdentifier? = nil, sourceClass: Swift.AnyClass?, headlineString: Swift.String?, dictionary: [Swift.AnyHashable : Any]? = nil, rollupLogMessageArray: [KochavaCore.KVALogMessage]? = nil, log: KochavaCore.KVALog?)
  public static func print(logLevel: KochavaCore.KVALogLevel?, sourceIdentifier: KochavaCore.KVALogMessage.SourceIdentifier?, sourceClass: Swift.AnyClass?, headlineString: Swift.String?, dictionary: [Swift.AnyHashable : Any]? = nil)
  public static func print(logLevel: KochavaCore.KVALogLevel?, sourceClass: Swift.AnyClass?, headlineString: Swift.String?, dictionary: [Swift.AnyHashable : Any]? = nil)
  public static func printError(sourceIdentifier: KochavaCore.KVALogMessage.SourceIdentifier?, sourceClass: Swift.AnyClass?, headlineString: Swift.String?, dictionary: [Swift.AnyHashable : Any]? = nil)
  public static func printInternalInconsistency(sourceIdentifier: KochavaCore.KVALogMessage.SourceIdentifier?, sourceClass: Swift.AnyClass?, dictionary: [Swift.AnyHashable : Any]? = nil)
  public static func printInternalError(sourceIdentifier: KochavaCore.KVALogMessage.SourceIdentifier, sourceClass: Swift.AnyClass?, dictionary: [Swift.AnyHashable : Any]? = nil, error: Swift.Error)
  public static func printWarning(sourceIdentifier: KochavaCore.KVALogMessage.SourceIdentifier, sourceClass: Swift.AnyClass?, dictionary: [Swift.AnyHashable : Any]? = nil, exception: Foundation.NSException)
  public static func printWarning(sourceIdentifier: KochavaCore.KVALogMessage.SourceIdentifier? = nil, sourceClass: Swift.AnyClass?, headlineString: Swift.String?, dictionary: [Swift.AnyHashable : Any]? = nil)
  public static func printWarning(sourceIdentifier: KochavaCore.KVALogMessage.SourceIdentifier, sourceClass: Swift.AnyClass?)
  @discardableResult
  required public init?(logLevel: KochavaCore.KVALogLevel? = nil, sourceIdentifier: KochavaCore.KVALogMessage.SourceIdentifier? = nil, sourceClass: Swift.AnyClass? = nil, headlineString: Swift.String? = nil, dictionary: [Swift.AnyHashable : Any]? = nil, rollupLogMessageArray: [KochavaCore.KVALogMessage]? = nil, printBool: Swift.Bool = false, log: KochavaCore.KVALog? = nil)
  public static func kva_from(_ object: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  final public func execute()
  final public func print()
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  final public var product: KochavaCore.KVAProduct {
    get
  }
  final public var sourceClass: Swift.AnyClass? {
    get
  }
  public typealias SourceIdentifier = Swift.String
  final public var visibleMaximumLogLevel: KochavaCore.KVALogLevel? {
    get
  }
  final public var bodyDictionary: [Swift.AnyHashable : Any]? {
    get
  }
  final public var printDidDate: Foundation.Date? {
    get
  }
  final public var printString: Swift.String {
    get
  }
  public static let didPrintNotificationName: Foundation.Notification.Name
  @objc deinit
}
public protocol KVAMutable : AnyObject {
  var mutator: KochavaCore.KVAMutator { get }
}
@objc(KVANetTransaction) final public class KVANetTransaction : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAExecutable, KochavaCore.KVAFromProtocol, KochavaCore.KVAFromWithInitializedObjectProtocol, KochavaCore.KVAInvalidatable, KochavaCore.KVAMutable, KochavaCore.KVANetworkingSetterProvider, KochavaCore.KVAStartable, KochavaCore.KVAStartableWithOptions {
  public static func start(networking: KochavaCore.KVANetworking?, baseIdentifier: KochavaCore.KVANetTransaction.Identifier?, prerequisiteTaskArray: [KochavaCore.KVATask]? = nil, localValueSourceCollection: KochavaCore.KVACollection? = nil, startLogMessagePrintBool: Swift.Bool? = nil, closure_didComplete: KochavaCore.KVANetTransaction.Closure_DidComplete? = nil)
  public static func start(networking: KochavaCore.KVANetworking?, jsonDictionary: [Swift.AnyHashable : Any], prerequisiteTaskArray: [KochavaCore.KVATask]? = nil, localValueSourceCollection: KochavaCore.KVACollection? = nil, startLogMessagePrintBool: Swift.Bool? = nil, closure_didComplete: KochavaCore.KVANetTransaction.Closure_DidComplete? = nil)
  required public init(networking: KochavaCore.KVANetworking? = nil, jsonDictionary: [Swift.AnyHashable : Any]? = nil, baseIdentifier: KochavaCore.KVANetTransaction.Identifier? = nil, prerequisiteTaskArray: [KochavaCore.KVATask]? = nil, localValueSourceCollection: KochavaCore.KVACollection? = nil, startBool: Swift.Bool = false, startLogMessagePrintBool: Swift.Bool? = nil, closure_enabledBool: KochavaCore.KVANetTransaction.Closure_EnabledBool? = nil, closure_transformedURLString: KochavaCore.KVANetTransaction.Closure_TransformedURLString? = nil, closure_willStartRequest: KochavaCore.KVANetTransaction.Closure_WillStartRequest? = nil, closure_succededBool: KochavaCore.KVANetTransaction.Closure_SucceededBool? = nil, closure_didComplete: KochavaCore.KVANetTransaction.Closure_DidComplete? = nil)
  @objc deinit
  public static func kva_from(_ object: Any?) -> Self?
  public static func kva_from(_ object: Any?, initializedObject: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  final public func execute()
  final public func start()
  final public func start(logMessagePrintBool: Swift.Bool, asyncBool: Swift.Bool)
  final public func invalidate()
  @objc override final public var description: Swift.String {
    @objc get
  }
  public typealias Closure_ServiceLocallyBool = (_ netTransaction: KochavaCore.KVANetTransaction) -> Swift.Bool
  public typealias Closure_PayloadTransformedObject = (_ netTransaction: KochavaCore.KVANetTransaction, _ object: Any?, _ additionalHeadersDictionaryBool: Swift.Bool) -> Any?
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  final public var sendTask: KochavaCore.KVATask {
    get
  }
  @objc weak final public var networking: KochavaCore.KVANetworking? {
    @objc get
    @objc set(networking)
  }
  final public func baseNetTransaction(withIdentifier identifier: KochavaCore.KVANetTransaction.Identifier) -> KochavaCore.KVANetTransaction?
  public typealias Closure_DidComplete = (_ netTransaction: KochavaCore.KVANetTransaction, _ didSucceedBool: Swift.Bool, _ responseClassObject: Any?, _ responseObject: Any?) -> Swift.Void
  final public var closure_enabledBool: KochavaCore.KVANetTransaction.Closure_EnabledBool? {
    get
    set(closure_enabledBool)
  }
  public typealias Closure_EnabledBool = (_ netTransaction: KochavaCore.KVANetTransaction) -> (Swift.Bool, Swift.String?)
  final public var closure_succededBool: KochavaCore.KVANetTransaction.Closure_SucceededBool? {
    get
    set(closure_succededBool)
  }
  final public func isSuccessfulBool(responseObject: Any?) -> Swift.Bool
  public typealias Closure_SucceededBool = (_ netTransaction: KochavaCore.KVANetTransaction, _ responseObject: Any?) -> Swift.Bool
  final public var closure_transformedURLString: KochavaCore.KVANetTransaction.Closure_TransformedURLString? {
    get
    set(closure_transformedURLString)
  }
  public typealias Closure_TransformedURLString = (_ netTransaction: KochavaCore.KVANetTransaction, _ startingURLString: Swift.String?) -> Swift.String?
  final public var closure_willStartRequest: KochavaCore.KVANetTransaction.Closure_WillStartRequest? {
    get
    set(closure_willStartRequest)
  }
  public typealias Closure_WillStartRequest = (_ netTransaction: KochavaCore.KVANetTransaction) -> Swift.Void
  final public var localValueSourceCollection: KochavaCore.KVACollection?
  final public var identifier: KochavaCore.KVANetTransaction.Identifier {
    get
  }
  public typealias Identifier = Swift.String
  final public var requestBodyDictionaryFormat: KochavaCore.KVADictionaryFormat? {
    get
  }
  public typealias UniversalIdentifier = Swift.String
  final public var urlString: Swift.String? {
    get
  }
  final public func urlIdStringArray() -> [Swift.String]?
  final public var attemptCount: Swift.Int {
    get
  }
  final public var completedBool: Swift.Bool {
    get
  }
  final public var didErrorCount: Swift.Int {
    get
  }
  final public var didExperienceDelayBool: Swift.Bool {
    get
  }
  final public var didStartFirstDate: Foundation.Date? {
    get
  }
  final public var elapsedTimeInterval: Swift.Double {
    get
  }
  final public func elapsedTimeIntervalDecimalNumber() -> Foundation.NSDecimalNumber
  final public var error: Swift.Error? {
    get
  }
  final public func requestRollupLogMessageArray_append(_ logMessage: KochavaCore.KVALogMessage?)
  final public var valueArrayDictionary: [Swift.String : KochavaCore.KVAValue]? {
    get
    set(valueArrayDictionary)
  }
  final public func valueArrayDictionary_configure(startingBool: Swift.Bool, startingFirstTimeBool: Swift.Bool, closure_didComplete: @escaping () -> Swift.Void)
  final public func valueArrayDictionary_value(forKeyString keyString: Swift.String?) -> KochavaCore.KVAValue?
  public static let attemptDidFinishButNotCompleteNotificationName: Foundation.Notification.Name
  public static let didCompleteNotificationName: Foundation.Notification.Name
  public static let requestBodyIdentifier: KochavaCore.KVACollection.ElementIdentifier
}
public protocol KVANetTransactionSubURLIdStringMethodProvider {
  func subURLIdString() -> Swift.String?
}
public protocol KVANetTransactionServiceLocallyBoolPropertyProvider {
  var serviceLocallyBool: Swift.Bool { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(KVANetTransactionType) final public class KVANetTransactionType : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol, KochavaCore.KVAMutable {
  required public init(universalIdentifier: KochavaCore.KVANetTransactionType.UniversalIdentifier, delegate: KochavaCore.KVAMutable?)
  public static func kva_from(_ object: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  final public func netTransaction_urlString(_ netTransaction: KochavaCore.KVANetTransaction?) -> Swift.String?
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  final public var currentVariationURLString: Swift.String? {
    get
  }
  final public var universalIdentifier: KochavaCore.KVANetTransactionType.UniversalIdentifier? {
    get
  }
  public typealias UniversalIdentifier = KochavaCore.KVANetTransaction.UniversalIdentifier
  final public var currentVariationStartDate: Foundation.Date? {
    get
  }
  final public var currentVariationSuccessfulURLIndex: Swift.Int? {
    get
  }
  final public var currentVariationSuccessfulURLString: Swift.String? {
    get
  }
  final public var currentVariationURLIndex: Swift.Int? {
    get
  }
  @objc deinit
}
@objc(KVANetworking) final public class KVANetworking : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAConfigureWithProtocol, KochavaCore.KVAFromProtocol, KochavaCore.KVAFromWithInitializedObjectProtocol, KochavaCore.KVAInvalidatable, KochavaCore.KVAInvalidatableWithOptions, KochavaCore.KVAKeyable, KochavaCore.KVAMutable, KochavaCore.KVASharedPropertyProvider, KochavaCore.KVAStartable, KochavaCore.KVAStartableWithOptions, KochavaCore.KVAStoppable, KochavaCore.KVAStoppableWithOptions {
  public static var shared: KochavaCore.KVANetworking {
    get
  }
  public static var shared_optional: KochavaCore.KVANetworking? {
    get
  }
  public static var sharedInstance: Swift.AnyObject {
    get
  }
  convenience public init(fromObject object: Any?, product: KochavaCore.KVAProduct, storageIdentifier: KochavaCore.KVANetworking.StorageIdentifier? = nil, delegate: KochavaCore.KVAMutable? = nil, closure_appLimitAdTrackingBool: KochavaCore.KVAPrivacy.Closure_AppLimitAdTrackingBool? = nil, closure_appTrackingTransparency_authorizedBool: KochavaCore.KVAPrivacy.Closure_AppTrackingTransparency_AuthorizedBool? = nil, closure_consent_didMutate: KochavaCore.KVAConsent.Closure_DidMutate? = nil, closure_deviceLimitAdTrackingBool: KochavaCore.KVAPrivacy.Closure_DeviceLimitAdTrackingBool? = nil, closure_netTransaction_payloadTransformedObject: KochavaCore.KVANetTransaction.Closure_PayloadTransformedObject? = nil)
  convenience public init(product: KochavaCore.KVAProduct, storageIdentifier: KochavaCore.KVANetworking.StorageIdentifier?)
  required public init(fromDictionary: [Swift.AnyHashable : Any]? = nil, storageIdentifier: KochavaCore.KVANetworking.StorageIdentifier? = nil)
  @objc deinit
  public static func kva_from(_ object: Any?) -> Self?
  public static func kva_from(_ object: Any?, initializedObject: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  final public func key(forContext context: KochavaCore.KVAContext?) -> Swift.AnyHashable?
  public static let key: Swift.String
  final public func configure(product: KochavaCore.KVAProduct, delegate: KochavaCore.KVAMutable? = nil, closure_appLimitAdTrackingBool: KochavaCore.KVAPrivacy.Closure_AppLimitAdTrackingBool? = nil, closure_appTrackingTransparency_authorizedBool: KochavaCore.KVAPrivacy.Closure_AppTrackingTransparency_AuthorizedBool? = nil, closure_consent_didMutate: KochavaCore.KVAConsent.Closure_DidMutate? = nil, closure_deviceLimitAdTrackingBool: KochavaCore.KVAPrivacy.Closure_DeviceLimitAdTrackingBool? = nil, closure_netTransaction_payloadTransformedObject: KochavaCore.KVANetTransaction.Closure_PayloadTransformedObject? = nil)
  final public func configure_parentConfigure_didComplete()
  @objc(configureWith:context:) final public func configure(with object: Any?, context: KochavaCore.KVAContext?)
  final public func kva_configure(with object: Any?, context: KochavaCore.KVAContext?)
  final public func start()
  final public func start(logMessagePrintBool: Swift.Bool, asyncBool: Swift.Bool)
  final public func stop()
  final public func stop(logMessagePrintBool: Swift.Bool, asyncBool: Swift.Bool)
  final public func invalidate()
  final public func invalidate(logMessagePrintBool: Swift.Bool, asyncBool: Swift.Bool)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc(executeAdvancedInstructionWithUniversalIdentifier:parameter:prerequisiteTaskIdentifierArray:) final public func executeAdvancedInstruction(universalIdentifier: KochavaCore.KVATask.UniversalIdentifier, parameter: KochavaCore.KVATask.Parameter? = nil, prerequisiteTaskIdentifierArray: [KochavaCore.KVATask.Identifier]? = nil)
  @objc final public var privacy: KochavaCore.KVAPrivacy {
    @objc get
  }
  final public var baseNetTransactionCollection: KochavaCore.KVACollection {
    get
  }
  final public var taskCollection: KochavaCore.KVACollection {
    get
  }
  final public var valueSourceCollection: KochavaCore.KVACollection {
    get
  }
  public static let arrayAdapterIdentifier: KochavaCore.KVAAdapter.Identifier
  public static let boolAdapterIdentifier: KochavaCore.KVAAdapter.Identifier
  public static let dataAdapterIdentifier: KochavaCore.KVAAdapter.Identifier
  public static let dateAdapterIdentifier: KochavaCore.KVAAdapter.Identifier
  public static let dictionaryAdapterIdentifier: KochavaCore.KVAAdapter.Identifier
  public static let intAdapterIdentifier: KochavaCore.KVAAdapter.Identifier
  public static let numberAdapterIdentifier: KochavaCore.KVAAdapter.Identifier
  public static let stringAdapterIdentifier: KochavaCore.KVAAdapter.Identifier
  public static let timeIntervalAdapterIdentifier: KochavaCore.KVAAdapter.Identifier
  public static let attemptInProgressConcurrentMaximumRegulationTaskIdentifier: KochavaCore.KVATask.Identifier
  public static let rateLimitingWindowRequestCountRegulationTaskIdentifier: KochavaCore.KVATask.Identifier
  public static let sleepTaskIdentifier: KochavaCore.KVATask.Identifier
  final public var sleepTask: KochavaCore.KVATask {
    get
    set
  }
  final public var startedTask: KochavaCore.KVATask {
    get
    set
  }
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  public static var sharedStorageIdentifier: KochavaCore.KVANetworking.StorageIdentifier? {
    get
    set(sharedStorageIdentifier)
  }
  final public let storageIdentifier: KochavaCore.KVANetworking.StorageIdentifier?
  public typealias StorageIdentifier = Swift.String
  final public var responseLocalBool: Swift.Bool? {
    get
    set(responseLocalBool)
  }
  final public func retryTimeIntervalSeries_copy() -> KochavaCore.KVATimeIntervalSeries
  final public var sleepBool: Swift.Bool {
    get
    set(sleepBool)
  }
  public static let errorRetryGroupWaitTaskIdentifier: KochavaCore.KVATask.Identifier
  final public var closure_instanceIdValueMetaValueArrayDictionary: KochavaCore.KVAValue.Closure_MetaValueArrayDictionary {
    get
  }
  final public var closure_staleBool_instanceId: KochavaCore.KVAValue.Closure_StaleBool {
    get
  }
  final public let instanceCount: Swift.Int
  final public let instanceIdentifier: Swift.String
  public typealias InstanceIdentifier = Swift.String
  final public var startedBool: Swift.Bool {
    get
  }
  public static let transactionProcessingOrderResequencingWaitTaskIdentifier: KochavaCore.KVATask.Identifier
  final public func transactionProcessingWaitTask_establish(prerequisiteTask: KochavaCore.KVATask? = nil) -> KochavaCore.KVATask
  public static let transactionProcessingWaitTaskIdentifier: KochavaCore.KVATask.Identifier
  public static let willDeallocNotificationName: Foundation.Notification.Name
}
@objc public protocol KVANetworkingSetterProvider {
  @objc var networking: KochavaCore.KVANetworking? { get set }
}
public protocol KVAPrintable {
  func print()
}
@objc(KVAProduct) open class KVAProduct : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol, KochavaCore.KVAExecutable {
  @objc(initWithAPIVersionString:buildDateString:bundleIdentifier:bundleType:compilerFlagNameArray:moduleName:name:organizationName:reverseDomainName:valueSourceCollection:versionString:dependentProductClassNameStringArray:closure_resetClasses:closure_resetVariables:closure_didRegister:) required public init(apiVersionString: Swift.String?, buildDateString: Swift.String?, bundleIdentifier: KochavaCore.KVAProduct.BundleIdentifier?, bundleType: KochavaCore.KVAProduct.BundleType, compilerFlagNameArray: [Swift.String]? = nil, moduleName: KochavaCore.KVAProduct.ModuleName, name: KochavaCore.KVAProduct.Name, organizationName: KochavaCore.KVAProduct.OrganizationName, reverseDomainName: KochavaCore.KVAProduct.ReverseDomainName?, valueSourceCollection: KochavaCore.KVACollection?, versionString: Swift.String?, dependentProductClassNameStringArray: [Swift.String]? = nil, closure_resetClasses: KochavaCore.KVAProduct.Closure_ResetClasses? = nil, closure_resetVariables: KochavaCore.KVAProduct.Closure_ResetVariables? = nil, closure_didRegister: KochavaCore.KVAProduct.Closure_DidRegister? = nil)
  public static func kva_from(_ object: Any?) -> Self?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public func execute()
  public func register()
  public func resetClasses(deleteLocalDataBool: Swift.Bool, includeExternalBool: Swift.Bool) -> [Swift.AnyHashable : Any]?
  public func resetVariables(deleteLocalDataBool: Swift.Bool, includeExternalBool: Swift.Bool) -> [Swift.AnyHashable : Any]?
  @objc(resetWithDeleteLocalDataBool:) public func reset(deleteLocalDataBool: Swift.Bool)
  @objc(resetWithDeleteLocalDataBool:closure_didComplete:) public func reset(deleteLocalDataBool: Swift.Bool, closure_didComplete: (() -> Swift.Void)?)
  @objc(resetWithDeleteLocalDataBool:includeExternalBool:includeDeviceAppGroupBool:logMessagePrintBool:closure_didComplete:) public func reset(deleteLocalDataBool: Swift.Bool, includeExternalBool: Swift.Bool, includeDeviceAppGroupBool: Swift.Bool = true, logMessagePrintBool: Swift.Bool = true, closure_didComplete: (() -> Swift.Void)? = nil)
  @objc(shutdownWithDeleteLocalDataBool:) public func shutdown(deleteLocalDataBool: Swift.Bool)
  @objc(shutdownWithDeleteLocalDataBool:closure_didComplete:) public func shutdown(deleteLocalDataBool: Swift.Bool, closure_didComplete: (() -> Swift.Void)?)
  public var standardVersionInfoString: Swift.String {
    get
  }
  public var nameWithVersionString: Swift.String {
    get
  }
  public static func buildDateString(forBundle bundle: Foundation.Bundle) -> Swift.String
  public var mutator: KochavaCore.KVAMutator {
    get
  }
  public var apiVersionString: Swift.String? {
    get
  }
  public var buildDateString: Swift.String? {
    get
  }
  public var bundleIdentifier: KochavaCore.KVAProduct.BundleIdentifier? {
    get
  }
  public typealias BundleIdentifier = Swift.String
  public var bundleType: KochavaCore.KVAProduct.BundleType {
    get
  }
  public typealias BundleType = Swift.String
  public typealias Closure_DidRegister = (_ product: KochavaCore.KVAProduct) -> Swift.Void
  public typealias Closure_ResetClasses = (_ deleteLocalDataBool: Swift.Bool, _ includeExternalBool: Swift.Bool) -> [Swift.AnyHashable : Any]?
  public typealias Closure_ResetVariables = (_ deleteLocalDataBool: Swift.Bool, _ includeExternalBool: Swift.Bool) -> [Swift.AnyHashable : Any]?
  public var compilerFlagNameArray: [KochavaCore.KVAProduct.CompilerFlagName]? {
    get
  }
  public typealias CompilerFlagName = Swift.String
  public var dependentProductClassNameStringArray: [Swift.String]? {
    get
  }
  public var organizationName: KochavaCore.KVAProduct.OrganizationName {
    get
  }
  public typealias OrganizationName = Swift.String
  public var moduleName: KochavaCore.KVAProduct.ModuleName {
    get
  }
  public typealias ModuleName = Swift.String
  public var name: KochavaCore.KVAProduct.Name {
    get
  }
  public typealias Name = Swift.String
  public var reverseDomainName: KochavaCore.KVAProduct.ReverseDomainName? {
    get
  }
  public typealias ReverseDomainName = Swift.String
  final public let valueSourceCollection: KochavaCore.KVACollection
  public var versionString: Swift.String? {
    get
  }
  public func applicationSupportDirectoryURL() -> Foundation.URL?
  public func applicationSupportDirectoryURL_ensureCreated()
  public var logLevel: KochavaCore.KVALogLevel? {
    get
    set(logLevel)
  }
  public var userDefaults: Foundation.UserDefaults? {
    get
  }
  public func userDefaults(forTypeString typeString: Swift.String?, appGroupsDeviceAppGroupIdentifier: KochavaCore.KVAAppGroups.Identifier? = nil) -> Foundation.UserDefaults?
  public var wrapperProduct: KochavaCore.KVAProduct? {
    get
    set(wrapperProduct)
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(KVAPrivacy) final public class KVAPrivacy : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAConfigureWithProtocol, KochavaCore.KVAFromProtocol, KochavaCore.KVAFromWithInitializedObjectProtocol, KochavaCore.KVAInvalidatable, KochavaCore.KVAMutable, KochavaCore.KVANetworkingSetterProvider, KochavaCore.KVAPrivacyProfileRegistrar {
  convenience public init(fromObject object: Any?, networking: KochavaCore.KVANetworking, delegate: KochavaCore.KVAMutable, closure_appLimitAdTrackingBool: KochavaCore.KVAPrivacy.Closure_AppLimitAdTrackingBool?, closure_appTrackingTransparency_authorizedBool: KochavaCore.KVAPrivacy.Closure_AppTrackingTransparency_AuthorizedBool?, closure_consent_didMutate: KochavaCore.KVAConsent.Closure_DidMutate?, closure_deviceLimitAdTrackingBool: KochavaCore.KVAPrivacy.Closure_DeviceLimitAdTrackingBool?)
  public static func kva_from(_ object: Any?) -> Self?
  public static func kva_from(_ object: Any?, initializedObject: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  final public func kva_configure(with object: Any?, context: KochavaCore.KVAContext?)
  @objc(registerProfile:) final public func register(profile: KochavaCore.KVAPrivacyProfile)
  final public func invalidate()
  @objc(setEnabledBoolForProfileName:enabledBool:) final public func setEnabledBool(forProfileName profileName: KochavaCore.KVAPrivacyProfile.Name, enabledBool: Swift.Bool)
  @available(*, deprecated, renamed: "setEnabledBool(forProfileName:enabledBool:)", message: "Modern Objective-C-style method deprecated.  Use Swift func setEnabledBool(forProfileName:enabledBool:) instead.")
  @objc(setEnabledBoolForProfileNameString:enabledBool:) final public func setEnabledBool(forProfileNameString profileNameString: Swift.String, enabledBool: Swift.Bool)
  final public func appLimitAdTracking_bool_didMutate()
  final public func appTrackingTransparency_authorizationDidComplete()
  final public func deviceLimitAdTracking_didSet()
  @objc final public var intelligentConsent: KochavaCore.KVAConsent {
    @objc get
  }
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  public static let sleepTaskIdentifier: KochavaCore.KVATask.Identifier
  @objc weak final public var networking: KochavaCore.KVANetworking?
  public typealias Closure_AppLimitAdTrackingBool = () -> Swift.Bool
  public typealias Closure_AppTrackingTransparency_AuthorizedBool = () -> Swift.Bool?
  public typealias Closure_DeviceLimitAdTrackingBool = () -> Swift.Bool
  final public func allowCustomIdentifierArray_containsString(_ string: Swift.String?) -> Swift.Bool
  final public func denyEventNameArray_containsString(_ string: Swift.String?) -> Swift.Bool
  final public func denyIdentityLinkNameArray_containsString(_ string: Swift.String?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(KVAProductController) final public class KVAProductController : ObjectiveC.NSObject {
  @objc public static let shared: KochavaCore.KVAProductController
  public static var sharedInstance: Swift.AnyObject {
    get
  }
  final public func register(product: KochavaCore.KVAProduct?)
  final public func product(forClass aClass: Swift.AnyClass?) -> KochavaCore.KVAProduct?
  final public func product(withModuleName moduleName: KochavaCore.KVAProduct.ModuleName?) -> KochavaCore.KVAProduct?
  final public func products_evaluationResultBool(forConditionString conditionString: Swift.String?) -> Swift.Bool
  @objc(products_resetWithDeleteLocalDataBool:closure_didComplete:) final public func products_reset(deleteLocalDataBool: Swift.Bool, closure_didComplete: (() -> Swift.Void)?)
  @objc(products_resetWithDeleteLocalDataBool:includeExternalBool:includeDeviceAppGroupBool:logMessagePrintBool:includeHostBool:includeUIBool:includeCoreBool:moduleNameArray:closure_didComplete:) final public func products_reset(deleteLocalDataBool: Swift.Bool, includeExternalBool: Swift.Bool, includeDeviceAppGroupBool: Swift.Bool = true, logMessagePrintBool: Swift.Bool = true, includeHostBool: Swift.Bool = false, includeUIBool: Swift.Bool = false, includeCoreBool: Swift.Bool = false, moduleNameArray: [KochavaCore.KVAProduct.ModuleName]? = nil, closure_didComplete: (() -> Swift.Void)?)
  @objc(products_shutdownWithDeleteLocalDataBool:closure_didComplete:) final public func products_shutdown(deleteLocalDataBool: Swift.Bool, closure_didComplete: (() -> Swift.Void)?)
  @objc(products_shutdownWithDeleteLocalDataBool:includeHostBool:includeUIBool:includeCoreBool:moduleNameArray:closure_didComplete:) final public func products_shutdown(deleteLocalDataBool: Swift.Bool, includeHostBool: Swift.Bool, includeUIBool: Swift.Bool, includeCoreBool: Swift.Bool, moduleNameArray: [KochavaCore.KVAProduct.ModuleName]? = nil, closure_didComplete: (() -> Swift.Void)?)
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  final public var productArray: [KochavaCore.KVAProduct] {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public protocol KVASharedPropertyProvider : AnyObject {
  static var sharedInstance: Swift.AnyObject { get }
}
public protocol KVAStartable : AnyObject {
  func start()
}
public protocol KVAStartableWithOptions : AnyObject {
  func start(logMessagePrintBool: Swift.Bool, asyncBool: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc(KVASystem) final public class KVASystem : ObjectiveC.NSObject {
  @objc public static var shared: KochavaCore.KVASystem {
    @objc get
  }
  @objc public static var shared_optional: KochavaCore.KVASystem? {
    @objc get
  }
  @objc deinit
  final public func primarySystemStartDidExecuteOnMainThread()
  @objc final public var appClipBool: Swift.Bool {
    @objc get
    @objc set(appClipBool)
  }
  final public var appExtensionBool: Swift.Bool {
    get
  }
  @objc final public func stateActiveDidBecome()
  @objc(stateActiveDidBecomeWithSourceString:) final public func stateActiveDidBecome(sourceString: Swift.String)
  @available(*, deprecated, renamed: "stateActiveDidBecome(sourceString:)", message: "Modern Objective-C-style method deprecated.  Use Swift func stateActiveDidBecome(sourceString:) instead.")
  final public func stateActiveDidBecome(withSourceString sourceString: Swift.String)
  @objc final public func stateActiveWillResign()
  @objc(stateActiveWillResignWithSourceString:) final public func stateActiveWillResign(sourceString: Swift.String)
  @available(*, deprecated, renamed: "stateActiveWillResign(sourceString:)", message: "Modern Objective-C-style method deprecated.  Use Swift func stateActiveWillResign(sourceString:) instead.")
  final public func stateActiveWillResign(withSourceString sourceString: Swift.String)
  final public func nameString() -> Swift.String
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  final public var stateActiveBool: Swift.Bool {
    get
  }
  @objc public static let messagesAppViewControllerDidBecomeActiveSourceString: Swift.String
  @objc public static let messagesAppViewControllerDidResignActiveSourceString: Swift.String
  public static let stateActiveDidBecomeNotificationName: Foundation.Notification.Name
  public static let stateActiveWillResignNotificationName: Foundation.Notification.Name
  @objc override dynamic public init()
}
public protocol KVAStoppable : AnyObject {
  func stop()
}
public protocol KVAStoppableWithOptions : AnyObject {
  func stop(logMessagePrintBool: Swift.Bool, asyncBool: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc(KVASystemLow) final public class KVASystemLow : ObjectiveC.NSObject {
  public static func architectureString() -> Swift.String?
  public static func bootDate() -> Foundation.Date?
  public static func hardwareMachineModelIdString() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public protocol KVAExecutable : AnyObject {
  func execute()
}
public protocol KVAExecutableWithOptions : AnyObject {
  func execute(logMessagePrintBool: Swift.Bool, asyncBool: Swift.Bool)
}
@_hasMissingDesignatedInitializers final public class KVAAny {
  public static func from(_ object: Any?, class aClass: Swift.AnyClass?, elementClass: Swift.AnyClass? = nil, initializedObject: Any? = nil, networking: KochavaCore.KVANetworking? = nil) -> Any?
  public static func objectAppending(object1: Any?, object2: Any?) -> Any?
  public static func redactedCopy(_ any: Any?, key: Swift.AnyHashable?, keyStringRedactedBoolDictionary: [Swift.String : Swift.Bool]? = nil, valueNonPropertyListItemsRedactedBool: Swift.Bool = false, redactionKeySuffixString: Swift.String? = nil, redactionMaximumDepth: Swift.Int? = nil, redactionIncludesStandardContainersBool: Swift.Bool = false, maximumDepth: Swift.Int? = nil) -> (redactedCopy: Any?, redactedKeyArray: Foundation.NSMutableArray?)
  public static func tokenResolvedObject(_ any: Any?) -> Any?
  public static func nonnull(_ any: Any?) -> Any
  public static func kva_as(_ any: Any, forContext context: KochavaCore.KVAContext?) -> Foundation.NSMutableDictionary?
  public static func mayMutateBool(_ any: Any) -> Swift.Bool
  public static func inheritanceResolvedElement(_ inheritanceElementsArray: [(Any?, Swift.String?, Swift.String?, Swift.Bool)]) -> (Any?, Swift.String?)
  public typealias Closure_ExecuteCustomMethod = (_ object: Swift.AnyObject, _ methodNameString: KochavaCore.KVAAny.CustomMethodName, _ parametersDictionary: [Swift.AnyHashable : Any]?) -> Swift.Void
  public typealias CustomMethodName = Swift.String
  @objc deinit
}
@objc(KVATask) final public class KVATask : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAExecutable, KochavaCore.KVAFromProtocol, KochavaCore.KVAFromWithInitializedObjectProtocol, KochavaCore.KVANetworkingSetterProvider, KochavaCore.KVAStartable, KochavaCore.KVAInvalidatable {
  public static func start(networking: KochavaCore.KVANetworking?, baseIdentifier: KochavaCore.KVATask.Identifier? = nil, identifier: KochavaCore.KVATask.Identifier?, universalIdentifier: KochavaCore.KVATask.UniversalIdentifier? = nil, logMessagesPrintBool: Swift.Bool? = nil, prerequisiteTaskIdentifierArray: [KochavaCore.KVATask.Identifier]? = nil, retryTimeIntervalSeries: KochavaCore.KVATimeIntervalSeries? = nil, resetFollowedTaskIdentifierArray: [KochavaCore.KVATask.Identifier]? = nil, closure_shouldAttemptBool: KochavaCore.KVATask.Closure_ShouldAttemptBool? = nil, closure_didComplete: KochavaCore.KVATask.Closure_DidComplete? = nil, closure_startAttempt: KochavaCore.KVATask.Closure_StartAttempt? = nil)
  public static func start(networking: KochavaCore.KVANetworking?, baseIdentifier: KochavaCore.KVATask.Identifier? = nil, identifier: KochavaCore.KVATask.Identifier?, universalIdentifier: KochavaCore.KVATask.UniversalIdentifier? = nil, extendedIdentifier: KochavaCore.KVATask.ExtendedIdentifier? = nil, parameter: KochavaCore.KVATask.Parameter? = nil, logMessagesPrintBool: Swift.Bool? = nil, prerequisiteTaskIdentifierArray: [KochavaCore.KVATask.Identifier]? = nil, prerequisiteTaskArray: [KochavaCore.KVATask]? = nil, prerequisiteTaskArrayIncludeNetworkingStartedBool: Swift.Bool? = nil, attemptTimeoutTimeInterval: Foundation.TimeInterval? = nil, retryTimeIntervalSeries: KochavaCore.KVATimeIntervalSeries? = nil, resetFollowedTaskIdentifierArray: [KochavaCore.KVATask.Identifier]? = nil, resetFollowedTaskArray: [KochavaCore.KVATask]? = nil, resetPassiveTimeInterval: Foundation.TimeInterval? = nil, singleExecutionIdentifier: KochavaCore.KVATask.SingleExecutionIdentifier? = nil, completedBool: Swift.Bool = false, completedBoolLogMessagesPrintBool: Swift.Bool = false, startBool: Swift.Bool = false, closure_shouldAttemptBool: KochavaCore.KVATask.Closure_ShouldAttemptBool? = nil, closure_didExperienceDelay: KochavaCore.KVATask.Closure_DidExperienceDelay? = nil, closure_didInvalidate: KochavaCore.KVATask.Closure_DidInvalidate? = nil, closure_didComplete: KochavaCore.KVATask.Closure_DidComplete? = nil, closure_didReset: KochavaCore.KVATask.Closure_DidReset? = nil, closure_executeCustomMethod: KochavaCore.KVAAny.Closure_ExecuteCustomMethod? = nil, closure_startAttempt: KochavaCore.KVATask.Closure_StartAttempt? = nil)
  public init(networking: KochavaCore.KVANetworking?, baseIdentifier: KochavaCore.KVATask.Identifier? = nil, identifier: KochavaCore.KVATask.Identifier?, universalIdentifier: KochavaCore.KVATask.UniversalIdentifier? = nil, logMessagesPrintBool: Swift.Bool? = nil, prerequisiteTaskIdentifierArray: [KochavaCore.KVATask.Identifier]? = nil, retryTimeIntervalSeries: KochavaCore.KVATimeIntervalSeries? = nil, resetFollowedTaskIdentifierArray: [KochavaCore.KVATask.Identifier]? = nil, closure_shouldAttemptBool: KochavaCore.KVATask.Closure_ShouldAttemptBool? = nil, closure_didComplete: KochavaCore.KVATask.Closure_DidComplete? = nil, closure_startAttempt: KochavaCore.KVATask.Closure_StartAttempt? = nil)
  public init(networking: KochavaCore.KVANetworking?, baseIdentifier: KochavaCore.KVATask.Identifier? = nil, identifier: KochavaCore.KVATask.Identifier?, universalIdentifier: KochavaCore.KVATask.UniversalIdentifier? = nil, extendedIdentifier: KochavaCore.KVATask.ExtendedIdentifier? = nil, parameter: KochavaCore.KVATask.Parameter? = nil, logMessagesPrintBool: Swift.Bool? = nil, prerequisiteTaskIdentifierArray: [KochavaCore.KVATask.Identifier]? = nil, prerequisiteTaskArray: [KochavaCore.KVATask]? = nil, prerequisiteTaskArrayIncludeNetworkingStartedBool: Swift.Bool? = nil, attemptTimeoutTimeInterval: Foundation.TimeInterval? = nil, retryTimeIntervalSeries: KochavaCore.KVATimeIntervalSeries? = nil, resetFollowedTaskIdentifierArray: [KochavaCore.KVATask.Identifier]? = nil, resetFollowedTaskArray: [KochavaCore.KVATask]? = nil, resetPassiveTimeInterval: Foundation.TimeInterval? = nil, singleExecutionIdentifier: KochavaCore.KVATask.SingleExecutionIdentifier? = nil, completedBool: Swift.Bool = false, completedBoolLogMessagesPrintBool: Swift.Bool = false, startBool: Swift.Bool = false, closure_shouldAttemptBool: KochavaCore.KVATask.Closure_ShouldAttemptBool? = nil, closure_didExperienceDelay: KochavaCore.KVATask.Closure_DidExperienceDelay? = nil, closure_didInvalidate: KochavaCore.KVATask.Closure_DidInvalidate? = nil, closure_didComplete: KochavaCore.KVATask.Closure_DidComplete? = nil, closure_didReset: KochavaCore.KVATask.Closure_DidReset? = nil, closure_executeCustomMethod: KochavaCore.KVAAny.Closure_ExecuteCustomMethod? = nil, closure_startAttempt: KochavaCore.KVATask.Closure_StartAttempt? = nil)
  @objc deinit
  public static func kva_from(_ object: Any?) -> Self?
  public static func kva_from(_ object: Any?, initializedObject: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  @objc override final public var description: Swift.String {
    @objc get
  }
  final public func execute()
  final public func start()
  final public func start(evaluateFirstPublicCompletedCheckBool: Swift.Bool)
  final public func reset()
  final public func resetAttemptSeries()
  final public func didReset_addObserver(closure: ((_ notification: Foundation.Notification) -> Swift.Void)? = nil) -> ObjectiveC.NSObjectProtocol?
  public static let didResetNotificationName: Foundation.Notification.Name
  final public func invalidate()
  final public func evaluate()
  final public func endAttempt(accomplishedBool: Swift.Bool, allowRetryBool: Swift.Bool = true, retryInsertTimeInterval: Foundation.TimeInterval? = nil)
  final public func complete()
  final public func complete(logMessagesPrintBool: Swift.Bool)
  final public func didComplete_addObserver(closure: ((_ notification: Foundation.Notification) -> Swift.Void)? = nil) -> ObjectiveC.NSObjectProtocol?
  public static let didCompleteNotificationName: Foundation.Notification.Name
  final public func executeCustomMethod(name: KochavaCore.KVAAny.CustomMethodName, parametersDictionary: [Swift.AnyHashable : Any]?)
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  @objc final public var networking: KochavaCore.KVANetworking? {
    @objc get
    @objc set(networking)
  }
  final public var attemptTimeoutTimeInterval: Foundation.TimeInterval {
    get
    set(attemptTimeoutTimeInterval)
  }
  final public var attemptTimeoutTimeInterval_optional: Foundation.TimeInterval? {
    get
    set(attemptTimeoutTimeInterval_optional)
  }
  public typealias ExtendedIdentifier = Swift.String
  final public var logMessagesPrintBool: Swift.Bool {
    get
    set(logMessagesPrintBool)
  }
  final public var logMessagesPrintBool_optional: Swift.Bool? {
    get
    set(logMessagesPrintBool_optional)
  }
  final public var identifier: KochavaCore.KVATask.Identifier {
    get
  }
  public typealias Identifier = Swift.String
  final public var parameter: KochavaCore.KVATask.Parameter? {
    get
  }
  public typealias Parameter = Any
  final public func prerequisiteTaskArray_resolved_preconfigure(fetchOnceTasksBool: Swift.Bool = false, prerequisiteTaskIdentifierArrayBool: Swift.Bool = false, prerequisiteTaskArrayBool: Swift.Bool = false)
  final public var prerequisiteTaskArray: [KochavaCore.KVATask]? {
    get
    set(prerequisiteTaskArray)
  }
  final public var prerequisiteTaskIdentifierArray: [KochavaCore.KVATask.Identifier]? {
    get
    set(prerequisiteTaskIdentifierArray)
  }
  final public var prerequisiteTaskArrayIncludeNetworkingStartedBool: Swift.Bool {
    get
    set(prerequisiteTaskArrayIncludeNetworkingStartedBool)
  }
  final public var prerequisiteTaskArrayIncludeNetworkingStartedBool_optional: Swift.Bool? {
    get
    set(prerequisiteTaskArrayIncludeNetworkingStartedBool_optional)
  }
  final public var resetFollowedTaskArray: [KochavaCore.KVATask]? {
    get
    set(resetFollowedTaskArray)
  }
  final public var resetFollowedTaskIdentifierArray: [KochavaCore.KVATask.Identifier]? {
    get
    set(resetFollowedTaskIdentifierArray)
  }
  final public var resetPassiveTimeInterval: Foundation.TimeInterval {
    get
    set(resetPassiveTimeInterval)
  }
  final public var resetPassiveTimeInterval_optional: Foundation.TimeInterval? {
    get
    set(resetPassiveTimeInterval_optional)
  }
  final public var retryTimeIntervalSeries: KochavaCore.KVATimeIntervalSeries? {
    get
    set(retryTimeIntervalSeries)
  }
  public typealias SingleExecutionIdentifier = Swift.String
  final public var universalIdentifier: KochavaCore.KVATask.UniversalIdentifier? {
    get
    set(universalIdentifier)
  }
  public typealias UniversalIdentifier = Swift.AnyHashable
  public typealias Closure_DidComplete = (_ task: KochavaCore.KVATask) -> Swift.Void
  public typealias Closure_DidExperienceDelay = (_ task: KochavaCore.KVATask) -> Swift.Void
  public typealias Closure_DidInvalidate = (_ task: KochavaCore.KVATask) -> Swift.Void
  public typealias Closure_DidReset = (_ task: KochavaCore.KVATask) -> Swift.Void
  public typealias Closure_ShouldAttemptBool = (_ task: KochavaCore.KVATask) -> Swift.Bool
  public typealias Closure_StartAttempt = (_ task: KochavaCore.KVATask) -> Swift.Void
  final public var accomplishedBool: Swift.Bool {
    get
  }
  final public var attemptSeriesInProgressBool: Swift.Bool {
    get
  }
  final public func attemptSeriesInProgressTimeInterval() -> Foundation.TimeInterval
  final public var completedBool: Swift.Bool {
    get
  }
  final public var didExperienceDelayBool: Swift.Bool {
    get
  }
}
@_inheritsConvenienceInitializers @objc(KVATimeIntervalSeries) final public class KVATimeIntervalSeries : ObjectiveC.NSObject, Foundation.NSCopying, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAConfigureWithProtocol, KochavaCore.KVAFromProtocol, KochavaCore.KVAMutable {
  convenience public init(timeIntervalArray: [Foundation.TimeInterval]?, repeatFinalTimeIntervalBool: Swift.Bool)
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public static func kva_from(_ object: Any?) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  final public func kva_configure(with object: Any?, context: KochavaCore.KVAContext?)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  final public func reset()
  final public func advance()
  final public func currentTimeInterval() -> Foundation.TimeInterval?
  final public func currentTimeInterval_sf() -> Foundation.TimeInterval?
  final public func previousIterationString() -> Swift.String
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  final public var insertTimeInterval: Foundation.TimeInterval? {
    get
    set(insertTimeInterval)
  }
  final public var timeIntervalArray: [Foundation.TimeInterval]? {
    get
    set(timeIntervalArray)
  }
  final public var currentIteration: Swift.Int {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(KVATag) final public class KVATag : ObjectiveC.NSObject {
  @objc deinit
}
@objc(KVATimer) final public class KVATimer : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAInvalidatable, KochavaCore.KVAStartable, KochavaCore.KVAStoppable {
  public init(identifier: KochavaCore.KVATimer.Identifier, extendedIdentifier: KochavaCore.KVATimer.ExtendedIdentifier? = nil, timeInterval: Foundation.TimeInterval? = nil, timeIntervalZeroShouldNotRunBool: Swift.Bool = false, logMessagesPrintBool: Swift.Bool? = nil, logMessagesPrintWhenLongTimeInterval: Foundation.TimeInterval? = nil, logMessagesPrintTimeIntervalAdjustedWhileTimerActiveBool: Swift.Bool? = nil, logMessagesPrintDidFireBool: Swift.Bool? = nil, closure_timeInterval: KochavaCore.KVATimer.Closure_TimeInterval? = nil, closure_shouldBeRunningBool: KochavaCore.KVATimer.Closure_ShouldBeRunningBool? = nil, closure_willStart: KochavaCore.KVATimer.Closure_WillStart? = nil, closure_didFire: @escaping KochavaCore.KVATimer.Closure_DidFire)
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  @discardableResult
  final public func configure(allowToRunBool: Swift.Bool? = nil, shouldBeRunningBool: Swift.Bool? = nil) -> Swift.Bool
  final public func start()
  final public func stop()
  final public func reset()
  final public func invalidate()
  @objc override final public var description: Swift.String {
    @objc get
  }
  final public var elapsedTimeInterval: Foundation.TimeInterval {
    get
  }
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  public typealias Closure_DidFire = (_ timer: KochavaCore.KVATimer) -> Swift.Void
  public typealias Closure_ShouldBeRunningBool = (_ timer: KochavaCore.KVATimer) -> Swift.Bool
  public typealias Closure_TimeInterval = (_ timer: KochavaCore.KVATimer) -> Foundation.TimeInterval?
  public typealias Closure_WillStart = (_ timer: KochavaCore.KVATimer) -> Swift.Void
  public typealias ExtendedIdentifier = Swift.String
  public typealias Identifier = Swift.String
  final public var timeInterval: Foundation.TimeInterval? {
    get
    set(timeInterval)
  }
  final public var startedBool: Swift.Bool {
    get
  }
  final public var timerActiveBool: Swift.Bool {
    get
  }
  @objc deinit
}
final public class KVAMutator {
  required public init(forObject: Swift.AnyObject, closure_didMutate_performSideEffects_beforeDispatch_sf: KochavaCore.KVAMutator.Closure_DidMutate_PerformSideEffects? = nil, closure_didMutate_performSideEffects: KochavaCore.KVAMutator.Closure_DidMutate_PerformSideEffects? = nil)
  final public func lock()
  final public func lock_includingParentFirst()
  final public func unlock()
  final public func unlock_includingParentLast()
  final public func didMutate()
  final public func didMutate_sf()
  final public func didMutate_sf(infoDictionary: [Swift.AnyHashable : Any]?)
  final public func didMutate_sf_df(childMutator: KochavaCore.KVAMutator? = nil, infoDictionary: [Swift.AnyHashable : Any]?, performSideEffectsIntendedBeforeDispatchBool: Swift.Bool = true)
  @objc final public func didMutate_addObserver(closure: ((_ notification: Foundation.Notification) -> Swift.Void)? = nil) -> ObjectiveC.NSObjectProtocol?
  public typealias Closure_DidMutate_PerformSideEffects = (_ mutator: KochavaCore.KVAMutator, _ childMutator: KochavaCore.KVAMutator?, _ infoDictionary: [Swift.AnyHashable : Any]?) -> Swift.Void
  final public var didMutatePassesToDelegateBool: Swift.Bool?
  weak final public var mutableDelegate: KochavaCore.KVAMutable? {
    get
    set
  }
  final public var didMutateDispatchCondensingAfterBool: Swift.Bool
  public static let priorityBoolKey: Swift.String
  @objc deinit
}
@objc(KVAValue) final public class KVAValue : ObjectiveC.NSObject, KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol, KochavaCore.KVAMutable {
  required public init(uuidString: Swift.String?, rawObject: Swift.AnyObject?, object: Swift.AnyObject? = nil, serverObject: Swift.AnyObject? = nil, valueSourceIdentifier: KochavaCore.KVAValue.SourceIdentifier? = nil, adapter: KochavaCore.KVAAdapter? = nil, metaValueArrayDictionary: [Swift.String : KochavaCore.KVAValue]? = nil, startDate: Foundation.Date? = nil, placeholderForAsynchronousCollectionBool: Swift.Bool = false, staleBool: Swift.Bool? = nil)
  @objc deinit
  public static func kva_from(_ object: Any?) -> Self?
  public static func kva_from(_ object: Any?, class aClass: Swift.AnyClass?, elementClass: Swift.AnyClass?, initializedObject: Any? = nil) -> Self?
  final public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  @objc override final public var description: Swift.String {
    @objc get
  }
  final public func array() -> [Swift.AnyObject]?
  final public func bool() -> Swift.Bool
  final public func bool_optional() -> Swift.Bool?
  final public func data() -> Foundation.Data?
  final public func date() -> Foundation.Date?
  final public func dictionary() -> [Swift.AnyHashable : Any]?
  final public func int() -> Swift.Int
  final public func int_optional() -> Swift.Int?
  final public func number() -> Foundation.NSNumber?
  final public func string() -> Swift.String?
  final public func timeInterval() -> Foundation.TimeInterval
  final public func timeInterval_optional() -> Foundation.TimeInterval?
  final public func ageTimeInterval() -> Foundation.TimeInterval
  final public func markStale()
  final public func staleBool() -> Swift.Bool
  final public func value(forContext context: KochavaCore.KVAContext?) -> KochavaCore.KVAValue?
  public static func valueArrayDictionary(fromObjectArray objectArray: [Any]?, globalValueSourceCollection: KochavaCore.KVACollection?) -> [Swift.String : KochavaCore.KVAValue]?
  final public func mayMutateBool() -> Swift.Bool
  public typealias Closure_MetaValueArrayDictionary = (_ value: KochavaCore.KVAValue) -> [Swift.String : KochavaCore.KVAValue]?
  public typealias Closure_StaleBool = (_ value: KochavaCore.KVAValue) -> Swift.Bool
  final public var mutator: KochavaCore.KVAMutator {
    get
  }
  weak final public var adapter: KochavaCore.KVAAdapter? {
    get
    set(adapter)
  }
  weak final public var globalValueSourceCollection: KochavaCore.KVACollection? {
    get
    set(globalValueSourceCollection)
  }
  final public var uuidString: Swift.String? {
    get
  }
  final public var metaValueArrayDictionary: [Swift.String : KochavaCore.KVAValue]? {
    get
  }
  final public var object: Swift.AnyObject? {
    get
  }
  final public var placeholderForAsynchronousCollectionBool: Swift.Bool {
    get
  }
  final public var rawObject: Swift.AnyObject? {
    get
  }
  final public func serverObject() -> Swift.AnyObject?
  final public func serverObject_string() -> Swift.String?
  final public var startDate: Foundation.Date {
    get
  }
  final public var valueSourceIdentifier: KochavaCore.KVAValue.SourceIdentifier? {
    get
  }
  public typealias SourceIdentifier = KochavaCore.KVACollection.ElementIdentifier
}
extension Foundation.NSArray : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  @objc public static func kva_from(_ object: Any?) -> Self?
  @objc public static func kva_from(_ object: Any?, elementClass: Swift.AnyClass? = nil, initializedObject: Any? = nil) -> Self?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
}
extension Foundation.NSData : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  @objc public static func kva_from(_ object: Any?) -> Self?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
}
extension Foundation.NSDate : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  @objc public static func kva_from(_ object: Any?) -> Self?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
}
extension Foundation.NSDecimalNumber {
  convenience public init(kva_fromDouble aDouble: Swift.Double)
  public static func kva_bankersScaleFourRoundingModeDecimalNumber(fromDouble aDouble: Swift.Double) -> Foundation.NSDecimalNumber
  public static func kva_bankersScaleFourRoundingModeDecimalNumber(fromNumber number: Foundation.NSNumber?) -> Foundation.NSDecimalNumber?
  public static func kva_bankersScaleFourRoundingModeDecimalNumber(fromObject object: Any?) -> Foundation.NSDecimalNumber?
  public static func kva_decimalNumber(fromDouble aDouble: Swift.Double, roundingBehaviorDecimalNumberHandler: Foundation.NSDecimalNumberHandler?) -> Foundation.NSDecimalNumber
  public static func kva_decimalNumber(fromNumber number: Foundation.NSNumber?, roundingBehaviorDecimalNumberHandler: Foundation.NSDecimalNumberHandler?) -> Foundation.NSDecimalNumber?
  public static func kva_timeIntervalRoundingModeDecimalNumber(fromNumber number: Foundation.NSNumber?) -> Foundation.NSDecimalNumber?
  public static func kva_timeIntervalRoundingModeDecimalNumber(fromObject object: Any?) -> Foundation.NSDecimalNumber?
  public static func kva_timeIntervalRoundingModeDecimalNumber(fromTimeInterval timeInterval: Foundation.TimeInterval) -> Foundation.NSDecimalNumber
  public static func kva_timeIntervalRoundingModeDecimalNumber(fromTimeInterval_optional timeInterval: Foundation.TimeInterval?) -> Foundation.NSDecimalNumber?
  public static let kva_bankersScaleFourRoundingModeDecimalNumberHandler: Foundation.NSDecimalNumberHandler
}
extension Foundation.Data : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  public init?(kva_hexString hexString: Swift.String?)
  public static func kva_from(_ object: Any?) -> Foundation.Data?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  public func kva_hexString() -> Swift.String?
}
extension Foundation.NSDictionary : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  @objc public static func kva_from(_ object: Any?) -> Self?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
}
extension Foundation.NSError : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  public static func kva_from(_ object: Any?) -> Self?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
}
@_hasMissingDesignatedInitializers final public class KVAAnyClass {
  public static func sanitizedNameString(_ aClass: Swift.AnyClass?) -> Swift.String?
  @objc deinit
}
extension Foundation.NSException : KochavaCore.KVAAsForContextProtocol {
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
}
extension Foundation.NSNumber : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  public static func kva_number(fromString string: Swift.String?) -> Self?
  @objc public static func kva_from(_ object: Any?) -> Self?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  public func kva_isBoolBool() -> Swift.Bool
}
extension Foundation.ProcessInfo {
  public func kva_operatingSystemNameString() -> Swift.String
  public func kva_operatingSystemStandardVersionInfoString() -> Swift.String
  public func kva_operatingSystemVersionString() -> Swift.String
}
extension Foundation.NSString : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  @objc(kva_stringFromJSONObject:prettyPrintBool:) public static func kva_string(fromJSONObject jsonObject: Any?, prettyPrintBool: Swift.Bool) -> Swift.String?
  @objc public static func kva_from(_ object: Any?) -> Self?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  @objc(kva_serializedJSONObjectWithPrintErrorsBool:) dynamic public func kva_serializedJSONObject(printErrorsBool: Swift.Bool = false) -> Any?
}
extension Foundation.UserDefaults {
  @objc(kva_keyNameStringWithPrefixString:identifierString:storageIdentifier:) public static func kva_keyNameString(prefixString: Swift.String?, identifierString: Swift.String?, storageIdentifier: KochavaCore.KVANetworking.StorageIdentifier?) -> Swift.String
}
extension Swift.String : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  public init?(kva_fromJSONObject jsonObject: Any?, prettyPrintBool: Swift.Bool)
  public static func kva_from(bool: Swift.Bool?) -> Swift.String
  public static func kva_from(_ object: Any?) -> Swift.String?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
  public func kva_withMaximumLength(_ maximumLength: Swift.Int) -> Swift.String
  public func kva_serializedJSONObject(printErrorsBool: Swift.Bool = false) -> Any?
}
extension Swift.Double : KochavaCore.KVAAsForContextProtocol, KochavaCore.KVAFromProtocol {
  public static func kva_from(_ object: Any?) -> Swift.Double?
  public func kva_as(forContext context: KochavaCore.KVAContext?) -> Swift.AnyObject?
}
@objc extension UIKit.UIApplication {
  @objc(kva_shared) @_Concurrency.MainActor(unsafe) public static func kva_shared() -> UIKit.UIApplication?
}
