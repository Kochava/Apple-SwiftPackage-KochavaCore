#if 0
#elif defined(__ARM64_ARCH_8_32__) && __ARM64_ARCH_8_32__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef KOCHAVACORE_SWIFT_H
#define KOCHAVACORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KochavaCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@class KVANetworking;

SWIFT_PROTOCOL("_TtP11KochavaCore27KVANetworkingSetterProvider_")
@protocol KVANetworkingSetterProvider
@property (nonatomic, strong) KVANetworking * _Nullable networking;
@end

@class NSString;

/// A class which collects and/or adapts a value to a variety of contexts.
SWIFT_CLASS_NAMED("KVAAdapter")
@interface KVAAdapter : NSObject <KVANetworkingSetterProvider>
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// An instance of networking.
@property (nonatomic, weak) KVANetworking * _Nullable networking;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class for working with the App Groups capability.
SWIFT_CLASS_NAMED("KVAAppGroups")
@interface KVAAppGroups : NSObject
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAAppGroups * _Nonnull shared;)
+ (KVAAppGroups * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// A shared instance, for convenience— optional.
/// See var <code>shared</code>.  This variable will be nil prior to the shared instance being defaulted.  This may be used to optionally invalidate any existing shared instance without causing it to first be defaulted in the process.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAAppGroups * _Nullable shared_optional;)
+ (KVAAppGroups * _Nullable)shared_optional SWIFT_WARN_UNUSED_RESULT;
/// A string which corresponds to an app group identifier to be used as a shared container for the Kochava SDK.
@property (nonatomic, copy) NSString * _Nullable deviceAppGroupIdentifierString;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which collects and/or adapts an array value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVAArrayAdapter")
@interface KVAArrayAdapter : KVAAdapter
@end


/// A class to manage the beginning and ending of a background task.
/// This class assists in keeping the host app alive, to give KVANetTransaction(s) and a chance to be sent, and other critical tasks the opportunity to finish, in the situation where the app is resigning active.
SWIFT_CLASS_NAMED("KVABackgroundTaskController")
@interface KVABackgroundTaskController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which collects and/or adapts a number value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVANumberAdapter")
@interface KVANumberAdapter : KVAAdapter
@end


/// A class which collects and/or adapts an integer value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVAIntAdapter")
@interface KVAIntAdapter : KVANumberAdapter
@end


/// A class which collects and/or adapts a boolean value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVABoolAdapter")
@interface KVABoolAdapter : KVAIntAdapter
@end


/// A class which defines an keyed collection of objects.
/// <h2>Features</h2>
/// <ul>
///   <li>
///     <em>Identification</em> — The property identifierString provides a unique identifier for use within a global system catalog.  This enables objects to be referenced from JSON objects.  It is also a base component for the formation of a key which can be used to store the associated information in persistent storage.
///   </li>
///   <li>
///     <em>Thread Safety</em> — Objects can be registered, re-registered, or removed in a thread-safe manner.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("KVACollection")
@interface KVACollection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class KVAContext;
@class NSNumber;
@class NSDate;
@class KVAPartner;

/// A feature which serves as an authority related to consent for the sharing of personal data.
/// Data sharing privacy laws such as GDPR require consent to be obtained before certain kinds of personal data may be collected or calculated, kept in memory, persisted or retained in persistent storage, and/or shared with partners.  During the natural lifecycle, there are times where partners may be added and cause the consent status to fall back to an unknown state.  Later the user may again be prompted and the consent status may (or may not) again come to be known.  All of this is predicated upon whether or not consent is required, which is governed by a variety of factors such as location.
SWIFT_CLASS_NAMED("KVAConsent")
@interface KVAConsent : NSObject <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// A method which is to be called when there has been a prompt for consent.
/// \param didGrantBoolNumber The response from the user, as a boolean wrapped in an NSNumber.  A value of true means consent was granted.  A value of false means consent was denied.  A value of nil means the user did not provide a response, and this includes if the user may have dismissed the dialog without indicating one way or another. 
///
- (void)didPromptWithDidGrantBoolNumber:(NSNumber * _Nullable)didGrantBoolNumber;
/// Return a boolean indicating if a prompt for consent should be made.
/// You should check this property when a call is made to didUpdateBlock to determine if the user should be prompted for consent.
- (BOOL)shouldPromptBool SWIFT_WARN_UNUSED_RESULT;
/// A method which may be called to notify that a prompt for consent will be made.
/// Optional.  This method can be used if you want to ensure that the prompt for consent will not be made again, even when a subsequent call to didPromptWithDidGrantBoolNumber: is never made, such as in the case of an unexpected termination.  If you call didPromptWithDidGrantBoolNumber: whenever the prompt is dismissed, even if the user did not give a response, then this method does not need to be called.
- (void)willPrompt;
/// Return a boolean indicating if consent is granted, denied, or there is no response.
/// This considers if the user previously granted consent, as well as the current definition of the Consent which may have changed since consent was last given.  This does not consider whether consent is required.  See also isGrantedBool.  Compare with mayCollectBool, mayKeepBool, mayPersistBool, and mayShareBool.
- (NSNumber * _Nullable)isGrantedBoolNumber SWIFT_WARN_UNUSED_RESULT;
/// Return a boolean indicating if consent is granted.
/// This considers if the user previously granted consent, as well as the current definition of consent- which may have changed since consent was last given.  This does not consider whether consent is required.  Compare with mayCollectBool, mayKeepBool, mayPersistBool, and mayShareBool.
- (BOOL)isGrantedBool SWIFT_WARN_UNUSED_RESULT;
/// Return a date for when consent was granted.
/// If isGrantedBool, then this returns responseDate.  If not, then this returns nil.
- (NSDate * _Nullable)isGrantedDate SWIFT_WARN_UNUSED_RESULT;
/// Return a boolean indicating if the app may calculate (or collect) data which may be subject to consent.
/// Return true if consent is not required or else is granted.  This will immediately return false if the consent requirement(s) have been updated but not an updated consent response has not yet been given from the user.  Compare with mayKeepBool, mayPersistBool, and mayShareBool.
/// note:
/// Deprecated in 4.2.0.  Please use mayCollectBool instead.
- (BOOL)mayCalculateBool SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "mayCollectBool");
/// Return a boolean indicating if the app may collect (or calculate) data which may be subject to consent.
/// Return true if consent is not required or else is granted.  This will immediately return false if the consent requirement(s) have been updated but not an updated consent response has not yet been given from the user.  Compare with mayKeepBool, mayPersistBool, and mayShareBool.
- (BOOL)mayCollectBool SWIFT_WARN_UNUSED_RESULT;
/// Return a boolean indicating if the app may persist (or retain in persistent storage) data which may be subject to consent.
/// Return true if consent is not required or else is granted.  This will immediately return false if the consent requirement(s) have been updated but not an updated consent response has not yet been given from the user.  Compare with mayCollectBool, mayKeepBool, and mayShareBool.
- (BOOL)mayPersistBool SWIFT_WARN_UNUSED_RESULT;
/// Return a boolean indicating if the app may share (or export) data which may be subject to consent.
/// Return true if consent is not required or else is granted.  This will immediately return false if the consent requirement(s) have been updated but not an updated consent response has not yet been given from the user.  Compare with mayCollectBool, mayKeepBool, and mayPersistBool.
- (BOOL)mayShareBool SWIFT_WARN_UNUSED_RESULT;
/// Return a boolean indicating if the app may keep (or retain in memory) data which may be subject to consent.
/// Return true if consent is not required or else the user did not otherwise previously deny consent.  This will return true while consent is not known, as long as the previous response did not deny consent.  This includes when the definition for consent has changed and the user previously granted consent.  Compare with mayCollectBool, mayPersistBool, and mayShareBool.
- (BOOL)mayKeepBool SWIFT_WARN_UNUSED_RESULT;
/// A string containing a high level description concerning consent.
/// Optional.  This may be presented to the user when prompting for consent.
/// Sample Value: “We share information with various partners… we’d like your consent…”
@property (nonatomic, readonly, copy) NSString * _Nullable descriptionString;
/// A closure which is called when there is an update to consent.
/// This can be used to prompt the user for consent and to enable and/or disable functionality.  Updates include, but are not limited to, when the user travels into or out of an area requiring consent, when new partners are added, and when conditions indicate a need to retry prompting the user.
@property (nonatomic, copy) void (^ _Nullable didUpdateBlock)(KVAConsent * _Nonnull);
/// A boolean which indicates that intelligent management is enabled.
/// When intelligent consent management is enabled and configured within your Kochava dashboard, the SDK will indicate when the user should be prompted for consent.  It will also not gather, persist, or transmit data which requires consent unless consent has been granted.
@property (nonatomic) BOOL intelligentManagementBool;
/// A boolean which indicates that the requirements for consent are managed manually (locally).
/// When intelligent consent management is enabled and configured within your Kochava dashboard, the SDK will indicate when the user should be prompted for consent.  It will also not gather, persist, or transmit data which requires consent unless consent has been granted.
@property (nonatomic) BOOL manualManagedRequirementsBool;
/// An array of instances of class <code>KVAPartner</code>.
/// This array of partners can be utilized when prompting for consent.
/// <h2>Example</h2>
/// \code
/// let consent = KVATracker.shared.consent
/// if let partnerArray = consent.partnerArray {
///     for partner in partnerArray {
///         print("do something with the partner... partner.nameString=\(String(describing: partner.nameString))")
///     }
/// }
///
/// \endcode
@property (nonatomic, readonly, copy) NSArray<KVAPartner *> * _Nullable partnerArray;
/// A string containing a unique value which, when changed, indicates a difference in what is required for consent.
/// Internal.  The value provided by the server which can be used to override what actually happens, i.e. force a re-prompt.
@property (nonatomic, readonly, copy) NSString * _Nullable promptIdString;
/// A boolean indicating if consent is required.
/// This is expected to be true when the user is taken to be under the scope of consent gathering requirements such as GDPR.  This is expected to be the case for EU citizens within EU territory or abroad, and non-EU citizens within EU territory.  When requiredBoolNumber is undefined this will return a default of true.  It will also be overridden to false when intelligentManagementBool is false.  This variable may also be set when Manual Managed Requirements is turned on.  See also requiredBoolNumber.
@property (nonatomic) BOOL requiredBool;
/// A boolean indicating if consent is required.
/// This is expected to be true when the user is taken to be under the scope of consent gathering requirements such as GDPR.  This is expected to be the case for EU citizens within EU territory or abroad, and non-EU citizens within EU territory.  When it is undefined this will return a default of nil.  This variable may also be set when Manual Managed Requirements is turned on.  See also requiredBool.
@property (nonatomic, strong) NSNumber * _Nullable requiredBoolNumber;
/// A boolean indicating the user’s response to a prompt for consent.
/// A value of true indicates consent was granted.  A value of false indicates consent was denied.  A value of nil exists when the user has not provided a response.
@property (nonatomic, readonly, strong) NSNumber * _Nullable responseBoolNumber;
/// A date representing the last time the user did respond concerning consent.
/// This includes both positive and negative responses.  This value is nil when the user has not provided a response.
@property (nonatomic, readonly, copy) NSDate * _Nullable responseDate;
@end


/// A class which defines a context.
/// This class provides the means of defining the context for something that is being done.  It is generally used to identify a target or provider.
SWIFT_CLASS_NAMED("KVAContext")
@interface KVAContext : NSObject
/// A context which represents the host app.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAContext * _Nonnull host;)
+ (KVAContext * _Nonnull)host SWIFT_WARN_UNUSED_RESULT;
/// A context which represents the log.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAContext * _Nonnull log;)
+ (KVAContext * _Nonnull)log SWIFT_WARN_UNUSED_RESULT;
/// A context which represents persistentStorage.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAContext * _Nonnull persistentStorage;)
+ (KVAContext * _Nonnull)persistentStorage SWIFT_WARN_UNUSED_RESULT;
/// A context which represents the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAContext * _Nonnull sdk;)
+ (KVAContext * _Nonnull)sdk SWIFT_WARN_UNUSED_RESULT;
/// A context which represents the Server.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAContext * _Nonnull server;)
+ (KVAContext * _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
/// A context which represents the Server, and is un-restricted by considerations such as allowed and denied identifiers.
/// This is of particular relevance with KVANetTransaction(s) where allowed and/or denied identifiers may not (or not yet) be known, such as config retrievals.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAContext * _Nonnull serverUnrestricted;)
+ (KVAContext * _Nonnull)serverUnrestricted SWIFT_WARN_UNUSED_RESULT;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which defines a product.
/// A product in this context generally refers to the result of a build.  A product can be used to represent a framework, application, or application extension.
SWIFT_CLASS_NAMED("KVAProduct")
@interface KVAProduct : NSObject
/// Create an instance of class <code>KVAProduct</code>.
/// <h2>Example</h2>
/// \code
/// let product = KVAProduct(
///     apiVersionString: "1",
///     buildDateString: nil,
///     bundleIdentifierString: Bundle(for: type(of: self)).bundleIdentifier,
///     bundleTypeString: "xcframework",
///     compilerFlagNameStringArray: nil,
///     moduleNameString: "MyModule",
///     nameString: "MyOrganization MyModule",
///     organizationNameString: "My Organization",
///     reverseDomainNameString: "com.myCompany.MyProduct",
///     valueSourceCollection: nil,
///     versionString: "1.0.0"
/// )
///
/// \endcode\param apiVersionString An optional API version string.  This property is used to establish API compatibility between products.  API compatibility is assumed to be assured when the value compares to be equal for all products with the same organizationNameString.
///
/// \param buildDateString An optional string containing the date when the product was built.  It is recommended that you source this a compile time.  The format is optional, but it is recommended that you provide the date in an ISO 8601 date string.
///
/// \param bundleIdentifierString A string containing the bundle identifier associated with this product.  This property may be used to cross-reference this product from a Class.  Logging uses this to take the class for a LogMessage and lookup the associated Product.
///
/// \param bundleTypeString The bundle type.  Examples:  “app”, “xcframework”, “static library”.
///
/// \param compilerFlagNameStringArray An array containing strings which are the names of compiler flags.
///
/// \param moduleNameString The name of the module.  Example:  “KochavaCore”.
///
/// \param nameString A name string.  Example: “Apple.Core”.
///
/// \param organizationNameString A string containing the name of the organization representing the product.  Example:  “Kochava”.
///
/// \param reverseDomainNameString A string containing a reverse domain name style representation of the name of the product.  This is used in the definition of keys for persistent storage, dispatch queues, etc.  Example:  “com.kochava.KochavaCore”.
///
/// \param valueSourceCollection A collection containing value sources for variable substitution with an NSPredicate, used for predicate evaluation and token substitution.
///
/// \param versionString A version string.
///
- (nonnull instancetype)initWithAPIVersionString:(NSString * _Nullable)apiVersionString buildDateString:(NSString * _Nullable)buildDateString bundleIdentifierString:(NSString * _Nullable)bundleIdentifierString bundleTypeString:(NSString * _Nonnull)bundleTypeString compilerFlagNameStringArray:(NSArray<NSString *> * _Nullable)compilerFlagNameStringArray moduleNameString:(NSString * _Nonnull)moduleNameString nameString:(NSString * _Nonnull)nameString organizationNameString:(NSString * _Nonnull)organizationNameString reverseDomainNameString:(NSString * _Nullable)reverseDomainNameString valueSourceCollection:(KVACollection * _Nullable)valueSourceCollection versionString:(NSString * _Nullable)versionString dependentProductClassNameStringArray:(NSArray<NSString *> * _Nullable)dependentProductClassNameStringArray closure_resetClasses:(NSDictionary * _Nullable (^ _Nullable)(BOOL, BOOL))closure_resetClasses closure_resetVariables:(NSDictionary * _Nullable (^ _Nullable)(BOOL, BOOL))closure_resetVariables closure_didRegister:(void (^ _Nullable)(KVAProduct * _Nonnull))closure_didRegister OBJC_DESIGNATED_INITIALIZER;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Resets the product.
/// This involves resetting variables to their original states.  This may include releasing shared instances.  When parameter deleteLocalDataBool is passed true it also includes erasing any keys from persistent storage which are associated with the product.  This method will complete asynchronously.  Before working with this product again you should wait until the reset has completed.  See method reset(deleteLocalDataBool:closure_didComplete:).
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
- (void)resetWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool;
/// Resets the product.
/// This involves resetting variables to their original states.  This may include releasing shared instances.  When parameter deleteLocalDataBool is passed true it also includes erasing any keys from persistent storage which are associated with the product.  This method will complete asynchronously.  Before working with this product again you should wait until the reset has completed.
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)resetWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
/// Resets the product.
/// This involves resetting variables to their original states.  This may include releasing shared instances.  When parameter deleteLocalDataBool is passed true it also includes erasing any keys from persistent storage which are associated with the product.  When parameter includeExternalVariablesBool is passed true it includes additional variables which are bearing on the functionality of the product but otherwise external to it.  This refers to third party variables.
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param includeExternalBool A boolean indicating whether or not external variables should be deleted.  This is intended for testing purposes.  See func <code>reset(deleteLocalDataBool:)</code> which always supplies this parameter as false.
///
/// \param includeDeviceAppGroupBool A boolean indicating whether or not the deviceAppGroup user defaults should be deleted.  This is where App Clip data is stored.
///
/// \param printLogMessageBool A boolean indicating whether or not a log message should be printed consistent with a public entry point.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)resetWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool includeExternalBool:(BOOL)includeExternalBool includeDeviceAppGroupBool:(BOOL)includeDeviceAppGroupBool printLogMessageBool:(BOOL)printLogMessageBool closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
/// Shut down the product.
/// This can be regarded as being equivalent to performing a reset, but may also include hints to avoid performing automatic behavior consistent with being freshly initialized.   This method will complete asynchronously.  Before working with this product again you should wait until the shutdown has completed.  See method shutdown(deleteLocalDataBool:closure_didComplete:).
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
- (void)shutdownWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool;
/// Shut down the product.
/// This can be regarded as being equivalent to performing a reset, but may also include hints to avoid performing automatic behavior consistent with being freshly initialized.  This method will complete asynchronously.  Before working with this product again you should wait until the shutdown has completed.
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)shutdownWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which defines the core product.
/// A product in this context generally refers to the result of a build.
SWIFT_CLASS_NAMED("KVACoreProduct")
@interface KVACoreProduct : KVAProduct
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAProduct * _Nonnull shared;)
+ (KVAProduct * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAPIVersionString:(NSString * _Nullable)apiVersionString buildDateString:(NSString * _Nullable)buildDateString bundleIdentifierString:(NSString * _Nullable)bundleIdentifierString bundleTypeString:(NSString * _Nonnull)bundleTypeString compilerFlagNameStringArray:(NSArray<NSString *> * _Nullable)compilerFlagNameStringArray moduleNameString:(NSString * _Nonnull)moduleNameString nameString:(NSString * _Nonnull)nameString organizationNameString:(NSString * _Nonnull)organizationNameString reverseDomainNameString:(NSString * _Nullable)reverseDomainNameString valueSourceCollection:(KVACollection * _Nullable)valueSourceCollection versionString:(NSString * _Nullable)versionString dependentProductClassNameStringArray:(NSArray<NSString *> * _Nullable)dependentProductClassNameStringArray closure_resetClasses:(NSDictionary * _Nullable (^ _Nullable)(BOOL, BOOL))closure_resetClasses closure_resetVariables:(NSDictionary * _Nullable (^ _Nullable)(BOOL, BOOL))closure_resetVariables closure_didRegister:(void (^ _Nullable)(KVAProduct * _Nonnull))closure_didRegister OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines the parameters for the core product.
SWIFT_CLASS("_TtC11KochavaCore20KVACoreProductParams")
@interface KVACoreProductParams : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which collects and/or adapts a data value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVADataAdapter")
@interface KVADataAdapter : KVAAdapter
@end


/// A class which collects and/or adapts a date value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVADateAdapter")
@interface KVADateAdapter : KVAAdapter
@end


/// A class for providing diagnostic messages in a format which has been standardized across all Kochava SDK platforms.
SWIFT_CLASS_NAMED("KVADiagnostic")
@interface KVADiagnostic : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which collects and/or adapts a dictionary value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVADictionaryAdapter")
@interface KVADictionaryAdapter : KVAAdapter
@end


/// A class which defines an entry in a dictionary.
/// This class provides the means of defining how an element in a dictionary should be formatted.
SWIFT_CLASS_NAMED("KVADictionaryEntryFormat")
@interface KVADictionaryEntryFormat : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which defines the structure of a dictionary.
/// This class provides the means of defining how a dictionary should be formatted.
SWIFT_CLASS_NAMED("KVADictionaryFormat")
@interface KVADictionaryFormat : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class providing standardized access to dispatch queues.
/// This class provides methods to work with dispatch queues with standardized features.  All such dispatches are identified with a sourceIdString, which can be used in reporting issues.
SWIFT_CLASS_NAMED("KVADispatchQueue")
@interface KVADispatchQueue : NSObject
/// A global concurrent utility-qos DispatchQueue, which can be used generically to ensure that code can wait and not block execution.
/// Any sub-system which wishes to ensure execution can wait and not block execution in a global sense may use this queue.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVADispatchQueue * _Nonnull globalConcurrent;)
+ (KVADispatchQueue * _Nonnull)globalConcurrent SWIFT_WARN_UNUSED_RESULT;
/// A global serial utility-qos DispatchQueue, which can be used generically to ensure that code execution is synchronized.
/// Any sub-system which wishes to synchronize code execution in a global sense may use this queue.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVADispatchQueue * _Nonnull globalSerial;)
+ (KVADispatchQueue * _Nonnull)globalSerial SWIFT_WARN_UNUSED_RESULT;
/// The main dispatch queue.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVADispatchQueue * _Nonnull main;)
+ (KVADispatchQueue * _Nonnull)main SWIFT_WARN_UNUSED_RESULT;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Asynchronously dispatch and execute the provided closure providing standardized handling for the requirements of a public entry point.
/// This always uses the default dispatch queue (globalSerial dispatch queue).
/// \param sourceIdString A unique identifier for the location in code from which this originated.  It may be a universally unique identifier (UUID) or a friendly name such as “func someFunc()”.  It is generally preferrable to use a friendly name for public methods, whereas a UUID may be more appropriate for internal methods.
///
/// \param sourceClass The class which is the source for the call.
///
/// \param closure The closure to execute (conditionally).
///
+ (void)asyncForPublicEntryPointWithSourceIdString:(NSString * _Nullable)sourceIdString hostAPICallDiagnosticHeadlineString:(NSString * _Nullable)hostAPICallDiagnosticHeadlineString sourceClass:(Class _Nullable)sourceClass closure:(void (^ _Nullable)(void))closure;
/// Asynchronously dispatch and execute the provided closure wrapped in a try-catch, and provides standard exception handling which logs the exception.
/// \param sourceIdString A unique identifier for the location in code from which this originated.  It may be a universally unique identifier (UUID) or a friendly name such as “func someFunc()”.  It is generally preferrable to use a friendly name for public methods, whereas a UUID may be more appropriate for internal methods.
///
/// \param closure The closure to execute (conditionally).
///
- (void)asyncWithSourceIdString:(NSString * _Nullable)sourceIdString closure:(void (^ _Nullable)(void))closure;
/// Asynchronously dispatch and execute the provided closure wrapped in a try-catch, and provides standard exception handling which logs the exception.  This will also optionally provide a guard check ensuring that the system has been adequately configured.
/// \param sourceIdString A unique identifier for the location in code from which this originated.  It may be a universally unique identifier (UUID) or a friendly name such as “func someFunc()”.  It is generally preferrable to use a friendly name for public methods, whereas a UUID may be more appropriate for internal methods.
///
/// \param sourceClass The class which is the source for the call.
///
/// \param closure The closure to execute (conditionally).
///
- (void)asyncWithSourceIdString:(NSString * _Nullable)sourceIdString sourceClass:(Class _Nullable)sourceClass closure:(void (^ _Nullable)(void))closure;
/// Asynchronously dispatch after a given timeInterval and execute the provided closure wrapped in a try-catch, and provides standard exception handling which logs the exception.  This will also optionally provide a guard check ensuring that the system has been adequately configured.
/// \param sourceIdString A unique identifier for the location in code from which this originated.  It may be a universally unique identifier (UUID) or a friendly name such as “func someFunc()”.  It is generally preferrable to use a friendly name for public methods, whereas a UUID may be more appropriate for internal methods.
///
/// \param timeInterval The TimeInterval to async after.
///
/// \param closure The closure to execute (conditionally).
///
- (void)asyncAfterWithSourceIdString:(NSString * _Nullable)sourceIdString timeInterval:(NSTimeInterval)timeInterval closure:(void (^ _Nullable)(void))closure;
/// Asynchronously dispatch after a stepped-settling dispatch.
/// The purpose of this dispatch recognizes that when we receive some form of wrapping trigger that really what we’re looking for is the moment in which that trigger’s entire body of work has completed.  Our goal is to move forward after the work associated with punctuated moments has settled.  The use of a stepped-settling dispatch provides a general form of assurance which minimizes the need for other forms of waits downstream.
/// When used to confirm that the shutdown of the sdk had completed for testing, in-between tests, using 5 steps it seemed to be sufficient.  It was taken up to 12 steps to help to ensure that it is also future proof for that use case.  If ever the number of steps were insufficient it could lead to the need to compensate in other ways later downstream.  The number of steps could be increased if ever it was found to be insufficient, but it’s unlikely that should ever occur.  If you find yourself here wondering if more steps are needed, there’s probably something else going on that you’re looking to compensate for.  You may either need comprehensive async and await, or else a concrete time-based delay.
- (void)asyncAfterSteppedSettlingDispatchWithSourceIdString:(NSString * _Nullable)sourceIdString closure:(void (^ _Nullable)(void))closure;
/// Asynchronously dispatch and execute the provided closure providing standardized handling for the requirements of a public entry point.
/// This always uses the default dispatch queue (globalSerial dispatch queue).
/// \param sourceIdString A unique identifier for the location in code from which this originated.  It may be a universally unique identifier (UUID) or a friendly name such as “func someFunc()”.  It is generally preferrable to use a friendly name for public methods, whereas a UUID may be more appropriate for internal methods.
///
/// \param sourceClass The class which is the source for the call.
///
/// \param asyncBool A boolean indicating if this closure should be executed asynchronously.
///
/// \param printLogMessageBool A boolean indicating if a LogMessage should be printed.
///
/// \param closure The closure to execute (conditionally).
///
+ (void)executeForPublicEntryPointWithSourceIdString:(NSString * _Nullable)sourceIdString hostAPICallDiagnosticHeadlineString:(NSString * _Nullable)hostAPICallDiagnosticHeadlineString sourceClass:(Class _Nullable)sourceClass asyncBool:(BOOL)asyncBool printLogMessageBool:(BOOL)printLogMessageBool closure:(void (^ _Nullable)(void))closure;
/// Asynchronously dispatch and execute the provided closure providing standardized handling for the requirements of a public entry point.
/// This always uses the default dispatch queue (globalSerial dispatch queue).
/// \param dispatchQueue A dispatchQueue to use.  Will default to globalSerial if not provided.
///
/// \param sourceIdString A unique identifier for the location in code from which this originated.  It may be a universally unique identifier (UUID) or a friendly name such as “func someFunc()”.  It is generally preferrable to use a friendly name for public methods, whereas a UUID may be more appropriate for internal methods.
///
/// \param sourceClass The class which is the source for the call.
///
/// \param asyncBool A boolean indicating if this closure should be executed asynchronously.
///
/// \param printLogMessageBool A boolean indicating if a LogMessage should be printed.
///
/// \param closure The closure to execute (conditionally).
///
+ (void)executeWithDispatchQueue:(KVADispatchQueue * _Nullable)dispatchQueue sourceIdString:(NSString * _Nullable)sourceIdString hostAPICallDiagnosticHeadlineString:(NSString * _Nullable)hostAPICallDiagnosticHeadlineString sourceClass:(Class _Nullable)sourceClass asyncBool:(BOOL)asyncBool printLogMessageBool:(BOOL)printLogMessageBool closure:(void (^ _Nullable)(void))closure;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("KVAFile")
@interface KVAFile : NSObject
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which defines instruction which can be executed.
SWIFT_CLASS_NAMED("KVAInstruction")
@interface KVAInstruction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class KVALogLevel;
@class KVALogMessage;

/// A class which constitutes a log, which is a collection of log messages.
SWIFT_CLASS_NAMED("KVALog")
@interface KVALog : NSObject
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALog * _Nonnull shared;)
+ (KVALog * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The visible maximum log level for log messages.
@property (nonatomic, strong) KVALogLevel * _Nullable level;
/// A boolean indicating if log messages may be printed using os_log.
/// Default true.  When disabled, log messages will fall back to NSLog or Swift’s print.  NSLog and Swift’s print lack certain features which os_log has, but they may print in environments where os_log is not supported.
@property (nonatomic) BOOL osLogEnabledBool;
/// A boolean indicating if log messages should be pretty printed.
/// Default true.
@property (nonatomic) BOOL prettyPrintBool;
/// A boolean indicating if log messages should be separated by new line and then printed individually.
/// Default false.  This can be used to overcome truncation issues, but it will add message prefixes to the beginning of each line.
@property (nonatomic) BOOL printLinesIndividuallyBool;
/// A prefix string to be added to the beginning of each item printed to the log.
/// Default nil.  This can be set to a value such as “KVA: “ to make filtering log messages easier.  When this is used in conjunction with var <code>printLinesIndividuallyBool</code> this prefix will be printed at the beginning of each line.
@property (nonatomic, copy) NSString * _Nullable printPrefixString;
/// Return a copy of the logMessageArray.
/// The copy is made safely with synchronization.
- (NSArray<KVALogMessage *> * _Nullable)logMessageArray_copy SWIFT_WARN_UNUSED_RESULT;
@end


/// A class which defines a log level, with enumerated values.
SWIFT_CLASS_NAMED("KVALogLevel")
@interface KVALogLevel : NSObject
/// A log level which never prints visibly to the log.
/// When LogMessage(s) are not printed visibly to the log, they are still posted as notifications.  This enables all LogMessage(s) to be observed, regardless of their current visibility.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull never;)
+ (KVALogLevel * _Nonnull)never SWIFT_WARN_UNUSED_RESULT;
/// A log level for an error.
/// The definition of an error adopted by the SDK is anything which is essentially fatal.  This does not mean that there needs to be a crash, but that something failed unrecoverably.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull error;)
+ (KVALogLevel * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
/// A log level for a warning.
/// A warning is generally anything that behaved unexpectedly and should be brought to the developer’s attention.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull warn;)
+ (KVALogLevel * _Nonnull)warn SWIFT_WARN_UNUSED_RESULT;
/// A log level for a piece of general information.
/// General information is anything not rising to the level of a warning but also something that does not require you to be debugging a product to see.  This level should be viewed as to be used sparingly, as it is the default log level.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull info;)
+ (KVALogLevel * _Nonnull)info SWIFT_WARN_UNUSED_RESULT;
/// A log level for a piece of debug information.
/// Debug information is something helpful to illuminate what is happening, without going into the minutia.
/// note:
/// We previously used osLogType .debug here, but the result was that for some time log levels higher than info weren’t showing in Xamarin apps- even in the simulator.  We were able to see log messages in the “Console” app, but only for info or below.  From my research there seem to be known Apple bug(s) associated with this.  So, for now we’ve switched the osLogType here to .info.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull debug;)
+ (KVALogLevel * _Nonnull)debug SWIFT_WARN_UNUSED_RESULT;
/// A log level for a piece of trace information.
/// Trace information is the minutia of what is happening.  This information would clutter the logs, even when debugging, and so is intended to be used when trying to trace down an obscure problem.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull trace;)
+ (KVALogLevel * _Nonnull)trace SWIFT_WARN_UNUSED_RESULT;
/// A log level which always prints visibly to the log.
/// When the logLevel is .always and the visibleMaximumLogLevel resolves to .never, the visibleMaximumLogLevel will win, resulting in no visibility.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull always;)
+ (KVALogLevel * _Nonnull)always SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The name.
/// Examples:  “never”, “error”, “warn”, “info”, “debug”, “trace”, “always”.
@property (nonatomic, readonly, copy) NSString * _Nonnull nameString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which defines a log message.
SWIFT_CLASS_NAMED("KVALogMessage")
@interface KVALogMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which defines a network transaction.
SWIFT_CLASS_NAMED("KVANetTransaction")
@interface KVANetTransaction : NSObject <KVANetworkingSetterProvider>
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// An instance of networking.
@property (nonatomic, weak) KVANetworking * _Nullable networking;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A queue of KVANetTransaction(s).
/// This class is a queue of KVANetTransaction(s) which exists for the purpose of holding transactions.  This queue is emptied as those transactions are completed.
SWIFT_CLASS_NAMED("KVANetTransactionQueue")
@interface KVANetTransactionQueue : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A network transaction type.
/// This generally corresponds to Kochava’s “action” key.
SWIFT_CLASS_NAMED("KVANetTransactionType")
@interface KVANetTransactionType : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The class KVANetworking provides basic networking support.
SWIFT_CLASS_NAMED("KVANetworking")
@interface KVANetworking : NSObject
/// Configure (update) the instance from another object.
/// This method is used to configure the instance.  It can be called from the host to override (or else default) various parameters.  The structure of the object you provide has the same capability as that which the server may return.  Additionally you can wrap the parameters you provide in objects $override$, $override.append$, $default$, or $default.append$, to indicate how these options are treated relative to the server’s options.
/// $override$:  Elements within this object will override any options of the same name specified by the server.
/// $override.append$:  Elements within this object will append/override any previously established $override$.  $override$ does not need to be used first.
/// $default$:  Elements within this object will serve as a default for any options of the same name when not specified by the server.
/// $default.append$:  Elements within this object will append/override any previously established $default$.  $default$ does not need to be used first.
/// \param object An object from which to configure the instance.  This is most commonly a JSON object.
///
/// \param context The context from which the object was provided.  In rare cases this may have some bearing on the proper interpretation of what was provided.
///
- (void)configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Execute an advanced instruction.
/// \param identifierString An identifier for the advanced instruction.
///
/// \param valueObject A value object for the advanced instruction.
///
- (void)executeAdvancedInstructionWithIdentifierString:(NSString * _Nonnull)identifierString valueObject:(id _Nullable)valueObject;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// The class KVAPartner defines a partner in the context of managing user consent in relationship to GDPR.
/// When prompting for consent, the user should be presented with a list of the partners with which data would be shared.  That list can grow or contract independent of software version because data sharing can take place server-to-server.  With these partners being defined within your Kochava dashboard, changes can be made automatically, promptly, and across a range of software versions.
SWIFT_CLASS_NAMED("KVAPartner")
@interface KVAPartner : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Return a boolean indicating if this partner raises a need to prompt for consent.
/// Compare with shouldBeIncludedInPromptBool.
- (BOOL)shouldPromptBool SWIFT_WARN_UNUSED_RESULT;
/// Return a date indicating when the user did grant consent.
/// The returned value will be non-nil if the user’s last response was to grant consent, even if that consent is not currently still valid.  Compare with isGrantedBool.
- (NSDate * _Nullable)didGrantDate SWIFT_WARN_UNUSED_RESULT;
/// Return a three-state boolean indicating if consent is granted, declined, or not known.
/// This does not consider whether consent is required.
- (NSNumber * _Nullable)isGrantedBoolNumber SWIFT_WARN_UNUSED_RESULT;
/// Return a boolean indicating if consent is granted.
/// This is a two-state version of isGrantedBoolNumber.  This will return false when isGrantedBoolNumber is nil.
- (BOOL)isGrantedBool SWIFT_WARN_UNUSED_RESULT;
/// Return a date for when consent was granted.
/// If isGrantedBool, this returns responseDate.  If not, this returns nil.
- (NSDate * _Nullable)isGrantedDate SWIFT_WARN_UNUSED_RESULT;
/// A string containing a description of the partner.
/// This property is optional.  This may be presented to the user when prompting for consent.
/// Example: “Used to do X and Y.”
@property (nonatomic, readonly, copy) NSString * _Nullable descriptionString;
/// A string containing the name of the partner.
/// This may be presented to the user when prompting for consent.
/// Example: “Kochava”
@property (nonatomic, readonly, copy) NSString * _Nullable nameString;
/// A boolean indicating the user’s response.
/// A value of true indicates consent was granted.  A value of false indicates consent was denied.  A value of nil exists when the user has not provided a response.
@property (nonatomic, readonly, strong) NSNumber * _Nullable responseBoolNumber;
/// The date when the user did respond to consent.
/// This value is nil when the user has not provided a response.
@property (nonatomic, readonly, copy) NSDate * _Nullable responseDate;
@end



/// A controller for working with products.
SWIFT_CLASS_NAMED("KVAProductController")
@interface KVAProductController : NSObject
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAProductController * _Nonnull shared;)
+ (KVAProductController * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Resets product(s).
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)products_resetWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
/// Resets product(s).
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param includeExternalBool A boolean indicating whether or not external variables should be deleted.  This is intended for testing purposes.  See func <code>reset(deleteLocalDataBool:)</code> which always supplies this parameter as false.
///
/// \param includeDeviceAppGroupBool A boolean indicating whether or not the deviceAppGroup user defaults should be deleted.  This is where App Clip data is stored.
///
/// \param printLogMessageBool A boolean indicating whether or not a log message should be printed consistent with a public entry point.
///
/// \param includeHostBool A boolean indicating if you want to include the host.  The host requires an explicit authorization through this boolean.
///
/// \param includeUIBool A boolean indicating if you want to include module KochavaUI.  Module KochavaUI requires an explicit authorization through this boolean.
///
/// \param includeCoreBool A boolean indicating if you want to include module KochavaCore.  Module KochavaCore requires an explicit authorization through this boolean.
///
/// \param moduleNameStringArray An array of modules to include.  Optional.  If this array is not set then all modules are allowed.  If this is set then only those products whose module names are in this array will be included.  If you set an ‘include’ parameter and also set any value in this array, the name of that ‘include’ parameter must still also be in this array to be included.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)products_resetWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool includeExternalBool:(BOOL)includeExternalBool includeDeviceAppGroupBool:(BOOL)includeDeviceAppGroupBool printLogMessageBool:(BOOL)printLogMessageBool includeHostBool:(BOOL)includeHostBool includeUIBool:(BOOL)includeUIBool includeCoreBool:(BOOL)includeCoreBool moduleNameStringArray:(NSArray<NSString *> * _Nullable)moduleNameStringArray closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
/// Shuts down product(s).
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)products_shutdownWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
/// Shuts down product(s).
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param includeHostBool A boolean indicating if you want to include the host.  The host requires an explicit authorization through this boolean.
///
/// \param includeUIBool A boolean indicating if you want to include module KochavaUI.  Module KochavaUI requires an explicit authorization through this boolean.
///
/// \param includeCoreBool A boolean indicating if you want to include module KochavaCore.  Module KochavaCore requires an explicit authorization through this boolean.
///
/// \param moduleNameStringArray An array of modules to include.  Optional.  If this array is not set then all modules are allowed.  If this is set then only those products whose module names are in this array will be included.  If you set an ‘include’ parameter and also set any value in this array, the name of that ‘include’ parameter must still also be in this array to be included.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)products_shutdownWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool includeHostBool:(BOOL)includeHostBool includeUIBool:(BOOL)includeUIBool includeCoreBool:(BOOL)includeCoreBool moduleNameStringArray:(NSArray<NSString *> * _Nullable)moduleNameStringArray closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which collects and/or adapts a string value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVAStringAdapter")
@interface KVAStringAdapter : KVAAdapter
@end


/// A class for working with system-level properties.
SWIFT_CLASS_NAMED("KVASystem")
@interface KVASystem : NSObject
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVASystem * _Nonnull shared;)
+ (KVASystem * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// A shared instance, for convenience— optional.
/// See var <code>shared</code>.  This variable will be nil prior to the shared instance being defaulted.  This may be used to optionally invalidate any existing shared instance without causing it to first be defaulted in the process.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVASystem * _Nullable shared_optional;)
+ (KVASystem * _Nullable)shared_optional SWIFT_WARN_UNUSED_RESULT;
/// A boolean indicating if the current host is an app clip.
/// This property will return a default value based on whether or not it can be detected that the host is an app clip.  It uses the bundle identifier and looks for the default suffix of “.Clip” (case insensitive).  If it finds that suffix then this value will default to true, otherwise false.  If this assumption is not accurate for the host, this value can be set explicitly.
@property (nonatomic) BOOL appClipBool;
/// A method which can be called to report that the active state should become true.
/// Calling this method is generally redundant when the host is an application, as this change is observed automatically.  But this method can and should be called in app extensions, such as iMessage apps, to notify when the state is reported to have become active.
- (void)stateActiveDidBecome;
/// A method which can be called to report that the active state should become true.
/// Calling this method is generally redundant when the host is an application, as this change is observed automatically.  But this method can and should be called in app extensions, such as iMessage apps, to notify when the state is reported to have become active.
/// \param sourceString A string which describes the source that is originating the state change.
///
- (void)stateActiveDidBecomeWithSourceString:(NSString * _Nonnull)sourceString;
/// A method which can be called to report that the active state should resign true.
/// Calling this method is generally redundant when the host is an application, as this change is observed automatically.  But this method can and should be called in app extensions, such as iMessage apps, to notify when the state is reported to have resigned active.
- (void)stateActiveWillResign;
/// A method which can be called to report that the active state should resign true.
/// Calling this method is generally redundant when the host is an application, as this change is observed automatically.  But this method can and should be called in app extensions, such as iMessage apps, to notify when the state is reported to have resigned active.
/// \param sourceString A string which describes the source that is originating the state change.
///
- (void)stateActiveWillResignWithSourceString:(NSString * _Nonnull)sourceString;
/// A constant to use as the source when reporting that a MessagesAppViewController did become active.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull messagesAppViewControllerDidBecomeActiveSourceString;)
+ (NSString * _Nonnull)messagesAppViewControllerDidBecomeActiveSourceString SWIFT_WARN_UNUSED_RESULT;
/// A constant to use as the source when reporting that a MessagesAppViewController did resign active.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull messagesAppViewControllerDidResignActiveSourceString;)
+ (NSString * _Nonnull)messagesAppViewControllerDidResignActiveSourceString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class for working with a low level system (sys/) functions.
/// This class is a higher-level wrapper for system (sys/) functions, such as sys/utsname.h
SWIFT_CLASS_NAMED("KVASystemLow")
@interface KVASystemLow : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which defines a high-level task.
SWIFT_CLASS_NAMED("KVATask")
@interface KVATask : NSObject <KVANetworkingSetterProvider>
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// An instance of networking.
@property (nonatomic, strong) KVANetworking * _Nullable networking;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which collects and/or adapts a time interval value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVATimeIntervalAdapter")
@interface KVATimeIntervalAdapter : KVANumberAdapter
@end


/// A class which defines a series of time intervals, which express a waterfall pattern.
SWIFT_CLASS_NAMED("KVATimeIntervalSeries")
@interface KVATimeIntervalSeries : NSObject <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which wraps a timer with an advanced and high-level interface.
SWIFT_CLASS_NAMED("KVATimer")
@interface KVATimer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A high-level wrapper for a value, along with its associated meta value(s).
SWIFT_CLASS_NAMED("KVAValue")
@interface KVAValue : NSObject
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NSArray<ObjectType> (SWIFT_EXTENSION(KochavaCore))
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Create an instance from another object, allowing for the elementClass to be explictly specified.
/// \param object An object from which to create the instance.  This is expected to be an NSArray.  The elements inside may be native class objects or may be other representations which can be resolved to native class objects.
///
/// \param elementClass The class of the element(s).
///
+ (nullable instancetype)kva_from:(id _Nullable)object elementClass:(Class _Nullable)elementClass initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSData (SWIFT_EXTENSION(KochavaCore))
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSDate (SWIFT_EXTENSION(KochavaCore))
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end



@interface NSDictionary<KeyType, ObjectType> (SWIFT_EXTENSION(KochavaCore))
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface NSNumber (SWIFT_EXTENSION(KochavaCore))
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(KochavaCore))
/// Return a json string serialized from a json object.
/// \param prettyPrintBool A boolean indicating whether you want the json to be pretty printed.  Pretty printing involves adding carriage returns, indentation, etc.  It generally makes it more human readable but increases the total bytes.
///
///
/// returns:
/// A formatted string.
+ (NSString * _Nullable)kva_stringFromJSONObject:(id _Nullable)jsonObject prettyPrintBool:(BOOL)prettyPrintBool SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Return a JSON object, assuming that the string represents JSON.
- (id _Nullable)kva_serializedJSONObjectWithPrintErrorsBool:(BOOL)printErrorsBool SWIFT_WARN_UNUSED_RESULT;
@end



@interface NSUserDefaults (SWIFT_EXTENSION(KochavaCore))
/// Return a properly formatted key name.
/// This will take an identifierString such as “someIdentifierString” and with a storageIdString such as “someStorageIdString”, turn it into something like the following:  com.kochava.KochavaTracker.someIdentifierString.someStorageIdString.  The reason why we are placing the storage id at the end, as opposed to before the identifierString, is because our legacy persisted values never had this key segment.  Inserting one at that location would cause the keys to be sorted inconsistently when compared against a nil value.  By placing it at the end, the order will be consistent, although interlaced.
/// \param prefixString A prefix for the key.  Example: “com.kochava.KochavaTracker”.
///
/// \param identifierString An identifier string.  Example: “ClassName.fieldName”.
///
/// \param storageIdString An optional storage identifier string.  Example: “Two”, or nil.
///
+ (NSString * _Nonnull)kva_keyNameStringWithPrefixString:(NSString * _Nullable)prefixString identifierString:(NSString * _Nullable)identifierString storageIdString:(NSString * _Nullable)storageIdString SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7K__) && __ARM_ARCH_7K__
// Generated by Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
#ifndef KOCHAVACORE_SWIFT_H
#define KOCHAVACORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KochavaCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@class KVANetworking;

SWIFT_PROTOCOL("_TtP11KochavaCore27KVANetworkingSetterProvider_")
@protocol KVANetworkingSetterProvider
@property (nonatomic, strong) KVANetworking * _Nullable networking;
@end

@class NSString;

/// A class which collects and/or adapts a value to a variety of contexts.
SWIFT_CLASS_NAMED("KVAAdapter")
@interface KVAAdapter : NSObject <KVANetworkingSetterProvider>
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// An instance of networking.
@property (nonatomic, weak) KVANetworking * _Nullable networking;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class for working with the App Groups capability.
SWIFT_CLASS_NAMED("KVAAppGroups")
@interface KVAAppGroups : NSObject
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAAppGroups * _Nonnull shared;)
+ (KVAAppGroups * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// A shared instance, for convenience— optional.
/// See var <code>shared</code>.  This variable will be nil prior to the shared instance being defaulted.  This may be used to optionally invalidate any existing shared instance without causing it to first be defaulted in the process.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAAppGroups * _Nullable shared_optional;)
+ (KVAAppGroups * _Nullable)shared_optional SWIFT_WARN_UNUSED_RESULT;
/// A string which corresponds to an app group identifier to be used as a shared container for the Kochava SDK.
@property (nonatomic, copy) NSString * _Nullable deviceAppGroupIdentifierString;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which collects and/or adapts an array value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVAArrayAdapter")
@interface KVAArrayAdapter : KVAAdapter
@end


/// A class to manage the beginning and ending of a background task.
/// This class assists in keeping the host app alive, to give KVANetTransaction(s) and a chance to be sent, and other critical tasks the opportunity to finish, in the situation where the app is resigning active.
SWIFT_CLASS_NAMED("KVABackgroundTaskController")
@interface KVABackgroundTaskController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which collects and/or adapts a number value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVANumberAdapter")
@interface KVANumberAdapter : KVAAdapter
@end


/// A class which collects and/or adapts an integer value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVAIntAdapter")
@interface KVAIntAdapter : KVANumberAdapter
@end


/// A class which collects and/or adapts a boolean value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVABoolAdapter")
@interface KVABoolAdapter : KVAIntAdapter
@end


/// A class which defines an keyed collection of objects.
/// <h2>Features</h2>
/// <ul>
///   <li>
///     <em>Identification</em> — The property identifierString provides a unique identifier for use within a global system catalog.  This enables objects to be referenced from JSON objects.  It is also a base component for the formation of a key which can be used to store the associated information in persistent storage.
///   </li>
///   <li>
///     <em>Thread Safety</em> — Objects can be registered, re-registered, or removed in a thread-safe manner.
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("KVACollection")
@interface KVACollection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class KVAContext;
@class NSNumber;
@class NSDate;
@class KVAPartner;

/// A feature which serves as an authority related to consent for the sharing of personal data.
/// Data sharing privacy laws such as GDPR require consent to be obtained before certain kinds of personal data may be collected or calculated, kept in memory, persisted or retained in persistent storage, and/or shared with partners.  During the natural lifecycle, there are times where partners may be added and cause the consent status to fall back to an unknown state.  Later the user may again be prompted and the consent status may (or may not) again come to be known.  All of this is predicated upon whether or not consent is required, which is governed by a variety of factors such as location.
SWIFT_CLASS_NAMED("KVAConsent")
@interface KVAConsent : NSObject <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)kva_asForContext:(KVAContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// A method which is to be called when there has been a prompt for consent.
/// \param didGrantBoolNumber The response from the user, as a boolean wrapped in an NSNumber.  A value of true means consent was granted.  A value of false means consent was denied.  A value of nil means the user did not provide a response, and this includes if the user may have dismissed the dialog without indicating one way or another. 
///
- (void)didPromptWithDidGrantBoolNumber:(NSNumber * _Nullable)didGrantBoolNumber;
/// Return a boolean indicating if a prompt for consent should be made.
/// You should check this property when a call is made to didUpdateBlock to determine if the user should be prompted for consent.
- (BOOL)shouldPromptBool SWIFT_WARN_UNUSED_RESULT;
/// A method which may be called to notify that a prompt for consent will be made.
/// Optional.  This method can be used if you want to ensure that the prompt for consent will not be made again, even when a subsequent call to didPromptWithDidGrantBoolNumber: is never made, such as in the case of an unexpected termination.  If you call didPromptWithDidGrantBoolNumber: whenever the prompt is dismissed, even if the user did not give a response, then this method does not need to be called.
- (void)willPrompt;
/// Return a boolean indicating if consent is granted, denied, or there is no response.
/// This considers if the user previously granted consent, as well as the current definition of the Consent which may have changed since consent was last given.  This does not consider whether consent is required.  See also isGrantedBool.  Compare with mayCollectBool, mayKeepBool, mayPersistBool, and mayShareBool.
- (NSNumber * _Nullable)isGrantedBoolNumber SWIFT_WARN_UNUSED_RESULT;
/// Return a boolean indicating if consent is granted.
/// This considers if the user previously granted consent, as well as the current definition of consent- which may have changed since consent was last given.  This does not consider whether consent is required.  Compare with mayCollectBool, mayKeepBool, mayPersistBool, and mayShareBool.
- (BOOL)isGrantedBool SWIFT_WARN_UNUSED_RESULT;
/// Return a date for when consent was granted.
/// If isGrantedBool, then this returns responseDate.  If not, then this returns nil.
- (NSDate * _Nullable)isGrantedDate SWIFT_WARN_UNUSED_RESULT;
/// Return a boolean indicating if the app may calculate (or collect) data which may be subject to consent.
/// Return true if consent is not required or else is granted.  This will immediately return false if the consent requirement(s) have been updated but not an updated consent response has not yet been given from the user.  Compare with mayKeepBool, mayPersistBool, and mayShareBool.
/// note:
/// Deprecated in 4.2.0.  Please use mayCollectBool instead.
- (BOOL)mayCalculateBool SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "mayCollectBool");
/// Return a boolean indicating if the app may collect (or calculate) data which may be subject to consent.
/// Return true if consent is not required or else is granted.  This will immediately return false if the consent requirement(s) have been updated but not an updated consent response has not yet been given from the user.  Compare with mayKeepBool, mayPersistBool, and mayShareBool.
- (BOOL)mayCollectBool SWIFT_WARN_UNUSED_RESULT;
/// Return a boolean indicating if the app may persist (or retain in persistent storage) data which may be subject to consent.
/// Return true if consent is not required or else is granted.  This will immediately return false if the consent requirement(s) have been updated but not an updated consent response has not yet been given from the user.  Compare with mayCollectBool, mayKeepBool, and mayShareBool.
- (BOOL)mayPersistBool SWIFT_WARN_UNUSED_RESULT;
/// Return a boolean indicating if the app may share (or export) data which may be subject to consent.
/// Return true if consent is not required or else is granted.  This will immediately return false if the consent requirement(s) have been updated but not an updated consent response has not yet been given from the user.  Compare with mayCollectBool, mayKeepBool, and mayPersistBool.
- (BOOL)mayShareBool SWIFT_WARN_UNUSED_RESULT;
/// Return a boolean indicating if the app may keep (or retain in memory) data which may be subject to consent.
/// Return true if consent is not required or else the user did not otherwise previously deny consent.  This will return true while consent is not known, as long as the previous response did not deny consent.  This includes when the definition for consent has changed and the user previously granted consent.  Compare with mayCollectBool, mayPersistBool, and mayShareBool.
- (BOOL)mayKeepBool SWIFT_WARN_UNUSED_RESULT;
/// A string containing a high level description concerning consent.
/// Optional.  This may be presented to the user when prompting for consent.
/// Sample Value: “We share information with various partners… we’d like your consent…”
@property (nonatomic, readonly, copy) NSString * _Nullable descriptionString;
/// A closure which is called when there is an update to consent.
/// This can be used to prompt the user for consent and to enable and/or disable functionality.  Updates include, but are not limited to, when the user travels into or out of an area requiring consent, when new partners are added, and when conditions indicate a need to retry prompting the user.
@property (nonatomic, copy) void (^ _Nullable didUpdateBlock)(KVAConsent * _Nonnull);
/// A boolean which indicates that intelligent management is enabled.
/// When intelligent consent management is enabled and configured within your Kochava dashboard, the SDK will indicate when the user should be prompted for consent.  It will also not gather, persist, or transmit data which requires consent unless consent has been granted.
@property (nonatomic) BOOL intelligentManagementBool;
/// A boolean which indicates that the requirements for consent are managed manually (locally).
/// When intelligent consent management is enabled and configured within your Kochava dashboard, the SDK will indicate when the user should be prompted for consent.  It will also not gather, persist, or transmit data which requires consent unless consent has been granted.
@property (nonatomic) BOOL manualManagedRequirementsBool;
/// An array of instances of class <code>KVAPartner</code>.
/// This array of partners can be utilized when prompting for consent.
/// <h2>Example</h2>
/// \code
/// let consent = KVATracker.shared.consent
/// if let partnerArray = consent.partnerArray {
///     for partner in partnerArray {
///         print("do something with the partner... partner.nameString=\(String(describing: partner.nameString))")
///     }
/// }
///
/// \endcode
@property (nonatomic, readonly, copy) NSArray<KVAPartner *> * _Nullable partnerArray;
/// A string containing a unique value which, when changed, indicates a difference in what is required for consent.
/// Internal.  The value provided by the server which can be used to override what actually happens, i.e. force a re-prompt.
@property (nonatomic, readonly, copy) NSString * _Nullable promptIdString;
/// A boolean indicating if consent is required.
/// This is expected to be true when the user is taken to be under the scope of consent gathering requirements such as GDPR.  This is expected to be the case for EU citizens within EU territory or abroad, and non-EU citizens within EU territory.  When requiredBoolNumber is undefined this will return a default of true.  It will also be overridden to false when intelligentManagementBool is false.  This variable may also be set when Manual Managed Requirements is turned on.  See also requiredBoolNumber.
@property (nonatomic) BOOL requiredBool;
/// A boolean indicating if consent is required.
/// This is expected to be true when the user is taken to be under the scope of consent gathering requirements such as GDPR.  This is expected to be the case for EU citizens within EU territory or abroad, and non-EU citizens within EU territory.  When it is undefined this will return a default of nil.  This variable may also be set when Manual Managed Requirements is turned on.  See also requiredBool.
@property (nonatomic, strong) NSNumber * _Nullable requiredBoolNumber;
/// A boolean indicating the user’s response to a prompt for consent.
/// A value of true indicates consent was granted.  A value of false indicates consent was denied.  A value of nil exists when the user has not provided a response.
@property (nonatomic, readonly, strong) NSNumber * _Nullable responseBoolNumber;
/// A date representing the last time the user did respond concerning consent.
/// This includes both positive and negative responses.  This value is nil when the user has not provided a response.
@property (nonatomic, readonly, copy) NSDate * _Nullable responseDate;
@end


/// A class which defines a context.
/// This class provides the means of defining the context for something that is being done.  It is generally used to identify a target or provider.
SWIFT_CLASS_NAMED("KVAContext")
@interface KVAContext : NSObject
/// A context which represents the host app.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAContext * _Nonnull host;)
+ (KVAContext * _Nonnull)host SWIFT_WARN_UNUSED_RESULT;
/// A context which represents the log.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAContext * _Nonnull log;)
+ (KVAContext * _Nonnull)log SWIFT_WARN_UNUSED_RESULT;
/// A context which represents persistentStorage.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAContext * _Nonnull persistentStorage;)
+ (KVAContext * _Nonnull)persistentStorage SWIFT_WARN_UNUSED_RESULT;
/// A context which represents the SDK.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAContext * _Nonnull sdk;)
+ (KVAContext * _Nonnull)sdk SWIFT_WARN_UNUSED_RESULT;
/// A context which represents the Server.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAContext * _Nonnull server;)
+ (KVAContext * _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
/// A context which represents the Server, and is un-restricted by considerations such as allowed and denied identifiers.
/// This is of particular relevance with KVANetTransaction(s) where allowed and/or denied identifiers may not (or not yet) be known, such as config retrievals.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAContext * _Nonnull serverUnrestricted;)
+ (KVAContext * _Nonnull)serverUnrestricted SWIFT_WARN_UNUSED_RESULT;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which defines a product.
/// A product in this context generally refers to the result of a build.  A product can be used to represent a framework, application, or application extension.
SWIFT_CLASS_NAMED("KVAProduct")
@interface KVAProduct : NSObject
/// Create an instance of class <code>KVAProduct</code>.
/// <h2>Example</h2>
/// \code
/// let product = KVAProduct(
///     apiVersionString: "1",
///     buildDateString: nil,
///     bundleIdentifierString: Bundle(for: type(of: self)).bundleIdentifier,
///     bundleTypeString: "xcframework",
///     compilerFlagNameStringArray: nil,
///     moduleNameString: "MyModule",
///     nameString: "MyOrganization MyModule",
///     organizationNameString: "My Organization",
///     reverseDomainNameString: "com.myCompany.MyProduct",
///     valueSourceCollection: nil,
///     versionString: "1.0.0"
/// )
///
/// \endcode\param apiVersionString An optional API version string.  This property is used to establish API compatibility between products.  API compatibility is assumed to be assured when the value compares to be equal for all products with the same organizationNameString.
///
/// \param buildDateString An optional string containing the date when the product was built.  It is recommended that you source this a compile time.  The format is optional, but it is recommended that you provide the date in an ISO 8601 date string.
///
/// \param bundleIdentifierString A string containing the bundle identifier associated with this product.  This property may be used to cross-reference this product from a Class.  Logging uses this to take the class for a LogMessage and lookup the associated Product.
///
/// \param bundleTypeString The bundle type.  Examples:  “app”, “xcframework”, “static library”.
///
/// \param compilerFlagNameStringArray An array containing strings which are the names of compiler flags.
///
/// \param moduleNameString The name of the module.  Example:  “KochavaCore”.
///
/// \param nameString A name string.  Example: “Apple.Core”.
///
/// \param organizationNameString A string containing the name of the organization representing the product.  Example:  “Kochava”.
///
/// \param reverseDomainNameString A string containing a reverse domain name style representation of the name of the product.  This is used in the definition of keys for persistent storage, dispatch queues, etc.  Example:  “com.kochava.KochavaCore”.
///
/// \param valueSourceCollection A collection containing value sources for variable substitution with an NSPredicate, used for predicate evaluation and token substitution.
///
/// \param versionString A version string.
///
- (nonnull instancetype)initWithAPIVersionString:(NSString * _Nullable)apiVersionString buildDateString:(NSString * _Nullable)buildDateString bundleIdentifierString:(NSString * _Nullable)bundleIdentifierString bundleTypeString:(NSString * _Nonnull)bundleTypeString compilerFlagNameStringArray:(NSArray<NSString *> * _Nullable)compilerFlagNameStringArray moduleNameString:(NSString * _Nonnull)moduleNameString nameString:(NSString * _Nonnull)nameString organizationNameString:(NSString * _Nonnull)organizationNameString reverseDomainNameString:(NSString * _Nullable)reverseDomainNameString valueSourceCollection:(KVACollection * _Nullable)valueSourceCollection versionString:(NSString * _Nullable)versionString dependentProductClassNameStringArray:(NSArray<NSString *> * _Nullable)dependentProductClassNameStringArray closure_resetClasses:(NSDictionary * _Nullable (^ _Nullable)(BOOL, BOOL))closure_resetClasses closure_resetVariables:(NSDictionary * _Nullable (^ _Nullable)(BOOL, BOOL))closure_resetVariables closure_didRegister:(void (^ _Nullable)(KVAProduct * _Nonnull))closure_didRegister OBJC_DESIGNATED_INITIALIZER;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Resets the product.
/// This involves resetting variables to their original states.  This may include releasing shared instances.  When parameter deleteLocalDataBool is passed true it also includes erasing any keys from persistent storage which are associated with the product.  This method will complete asynchronously.  Before working with this product again you should wait until the reset has completed.  See method reset(deleteLocalDataBool:closure_didComplete:).
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
- (void)resetWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool;
/// Resets the product.
/// This involves resetting variables to their original states.  This may include releasing shared instances.  When parameter deleteLocalDataBool is passed true it also includes erasing any keys from persistent storage which are associated with the product.  This method will complete asynchronously.  Before working with this product again you should wait until the reset has completed.
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)resetWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
/// Resets the product.
/// This involves resetting variables to their original states.  This may include releasing shared instances.  When parameter deleteLocalDataBool is passed true it also includes erasing any keys from persistent storage which are associated with the product.  When parameter includeExternalVariablesBool is passed true it includes additional variables which are bearing on the functionality of the product but otherwise external to it.  This refers to third party variables.
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param includeExternalBool A boolean indicating whether or not external variables should be deleted.  This is intended for testing purposes.  See func <code>reset(deleteLocalDataBool:)</code> which always supplies this parameter as false.
///
/// \param includeDeviceAppGroupBool A boolean indicating whether or not the deviceAppGroup user defaults should be deleted.  This is where App Clip data is stored.
///
/// \param printLogMessageBool A boolean indicating whether or not a log message should be printed consistent with a public entry point.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)resetWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool includeExternalBool:(BOOL)includeExternalBool includeDeviceAppGroupBool:(BOOL)includeDeviceAppGroupBool printLogMessageBool:(BOOL)printLogMessageBool closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
/// Shut down the product.
/// This can be regarded as being equivalent to performing a reset, but may also include hints to avoid performing automatic behavior consistent with being freshly initialized.   This method will complete asynchronously.  Before working with this product again you should wait until the shutdown has completed.  See method shutdown(deleteLocalDataBool:closure_didComplete:).
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
- (void)shutdownWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool;
/// Shut down the product.
/// This can be regarded as being equivalent to performing a reset, but may also include hints to avoid performing automatic behavior consistent with being freshly initialized.  This method will complete asynchronously.  Before working with this product again you should wait until the shutdown has completed.
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)shutdownWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which defines the core product.
/// A product in this context generally refers to the result of a build.
SWIFT_CLASS_NAMED("KVACoreProduct")
@interface KVACoreProduct : KVAProduct
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAProduct * _Nonnull shared;)
+ (KVAProduct * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAPIVersionString:(NSString * _Nullable)apiVersionString buildDateString:(NSString * _Nullable)buildDateString bundleIdentifierString:(NSString * _Nullable)bundleIdentifierString bundleTypeString:(NSString * _Nonnull)bundleTypeString compilerFlagNameStringArray:(NSArray<NSString *> * _Nullable)compilerFlagNameStringArray moduleNameString:(NSString * _Nonnull)moduleNameString nameString:(NSString * _Nonnull)nameString organizationNameString:(NSString * _Nonnull)organizationNameString reverseDomainNameString:(NSString * _Nullable)reverseDomainNameString valueSourceCollection:(KVACollection * _Nullable)valueSourceCollection versionString:(NSString * _Nullable)versionString dependentProductClassNameStringArray:(NSArray<NSString *> * _Nullable)dependentProductClassNameStringArray closure_resetClasses:(NSDictionary * _Nullable (^ _Nullable)(BOOL, BOOL))closure_resetClasses closure_resetVariables:(NSDictionary * _Nullable (^ _Nullable)(BOOL, BOOL))closure_resetVariables closure_didRegister:(void (^ _Nullable)(KVAProduct * _Nonnull))closure_didRegister OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines the parameters for the core product.
SWIFT_CLASS("_TtC11KochavaCore20KVACoreProductParams")
@interface KVACoreProductParams : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which collects and/or adapts a data value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVADataAdapter")
@interface KVADataAdapter : KVAAdapter
@end


/// A class which collects and/or adapts a date value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVADateAdapter")
@interface KVADateAdapter : KVAAdapter
@end


/// A class for providing diagnostic messages in a format which has been standardized across all Kochava SDK platforms.
SWIFT_CLASS_NAMED("KVADiagnostic")
@interface KVADiagnostic : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which collects and/or adapts a dictionary value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVADictionaryAdapter")
@interface KVADictionaryAdapter : KVAAdapter
@end


/// A class which defines an entry in a dictionary.
/// This class provides the means of defining how an element in a dictionary should be formatted.
SWIFT_CLASS_NAMED("KVADictionaryEntryFormat")
@interface KVADictionaryEntryFormat : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which defines the structure of a dictionary.
/// This class provides the means of defining how a dictionary should be formatted.
SWIFT_CLASS_NAMED("KVADictionaryFormat")
@interface KVADictionaryFormat : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class providing standardized access to dispatch queues.
/// This class provides methods to work with dispatch queues with standardized features.  All such dispatches are identified with a sourceIdString, which can be used in reporting issues.
SWIFT_CLASS_NAMED("KVADispatchQueue")
@interface KVADispatchQueue : NSObject
/// A global concurrent utility-qos DispatchQueue, which can be used generically to ensure that code can wait and not block execution.
/// Any sub-system which wishes to ensure execution can wait and not block execution in a global sense may use this queue.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVADispatchQueue * _Nonnull globalConcurrent;)
+ (KVADispatchQueue * _Nonnull)globalConcurrent SWIFT_WARN_UNUSED_RESULT;
/// A global serial utility-qos DispatchQueue, which can be used generically to ensure that code execution is synchronized.
/// Any sub-system which wishes to synchronize code execution in a global sense may use this queue.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVADispatchQueue * _Nonnull globalSerial;)
+ (KVADispatchQueue * _Nonnull)globalSerial SWIFT_WARN_UNUSED_RESULT;
/// The main dispatch queue.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVADispatchQueue * _Nonnull main;)
+ (KVADispatchQueue * _Nonnull)main SWIFT_WARN_UNUSED_RESULT;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Asynchronously dispatch and execute the provided closure providing standardized handling for the requirements of a public entry point.
/// This always uses the default dispatch queue (globalSerial dispatch queue).
/// \param sourceIdString A unique identifier for the location in code from which this originated.  It may be a universally unique identifier (UUID) or a friendly name such as “func someFunc()”.  It is generally preferrable to use a friendly name for public methods, whereas a UUID may be more appropriate for internal methods.
///
/// \param sourceClass The class which is the source for the call.
///
/// \param closure The closure to execute (conditionally).
///
+ (void)asyncForPublicEntryPointWithSourceIdString:(NSString * _Nullable)sourceIdString hostAPICallDiagnosticHeadlineString:(NSString * _Nullable)hostAPICallDiagnosticHeadlineString sourceClass:(Class _Nullable)sourceClass closure:(void (^ _Nullable)(void))closure;
/// Asynchronously dispatch and execute the provided closure wrapped in a try-catch, and provides standard exception handling which logs the exception.
/// \param sourceIdString A unique identifier for the location in code from which this originated.  It may be a universally unique identifier (UUID) or a friendly name such as “func someFunc()”.  It is generally preferrable to use a friendly name for public methods, whereas a UUID may be more appropriate for internal methods.
///
/// \param closure The closure to execute (conditionally).
///
- (void)asyncWithSourceIdString:(NSString * _Nullable)sourceIdString closure:(void (^ _Nullable)(void))closure;
/// Asynchronously dispatch and execute the provided closure wrapped in a try-catch, and provides standard exception handling which logs the exception.  This will also optionally provide a guard check ensuring that the system has been adequately configured.
/// \param sourceIdString A unique identifier for the location in code from which this originated.  It may be a universally unique identifier (UUID) or a friendly name such as “func someFunc()”.  It is generally preferrable to use a friendly name for public methods, whereas a UUID may be more appropriate for internal methods.
///
/// \param sourceClass The class which is the source for the call.
///
/// \param closure The closure to execute (conditionally).
///
- (void)asyncWithSourceIdString:(NSString * _Nullable)sourceIdString sourceClass:(Class _Nullable)sourceClass closure:(void (^ _Nullable)(void))closure;
/// Asynchronously dispatch after a given timeInterval and execute the provided closure wrapped in a try-catch, and provides standard exception handling which logs the exception.  This will also optionally provide a guard check ensuring that the system has been adequately configured.
/// \param sourceIdString A unique identifier for the location in code from which this originated.  It may be a universally unique identifier (UUID) or a friendly name such as “func someFunc()”.  It is generally preferrable to use a friendly name for public methods, whereas a UUID may be more appropriate for internal methods.
///
/// \param timeInterval The TimeInterval to async after.
///
/// \param closure The closure to execute (conditionally).
///
- (void)asyncAfterWithSourceIdString:(NSString * _Nullable)sourceIdString timeInterval:(NSTimeInterval)timeInterval closure:(void (^ _Nullable)(void))closure;
/// Asynchronously dispatch after a stepped-settling dispatch.
/// The purpose of this dispatch recognizes that when we receive some form of wrapping trigger that really what we’re looking for is the moment in which that trigger’s entire body of work has completed.  Our goal is to move forward after the work associated with punctuated moments has settled.  The use of a stepped-settling dispatch provides a general form of assurance which minimizes the need for other forms of waits downstream.
/// When used to confirm that the shutdown of the sdk had completed for testing, in-between tests, using 5 steps it seemed to be sufficient.  It was taken up to 12 steps to help to ensure that it is also future proof for that use case.  If ever the number of steps were insufficient it could lead to the need to compensate in other ways later downstream.  The number of steps could be increased if ever it was found to be insufficient, but it’s unlikely that should ever occur.  If you find yourself here wondering if more steps are needed, there’s probably something else going on that you’re looking to compensate for.  You may either need comprehensive async and await, or else a concrete time-based delay.
- (void)asyncAfterSteppedSettlingDispatchWithSourceIdString:(NSString * _Nullable)sourceIdString closure:(void (^ _Nullable)(void))closure;
/// Asynchronously dispatch and execute the provided closure providing standardized handling for the requirements of a public entry point.
/// This always uses the default dispatch queue (globalSerial dispatch queue).
/// \param sourceIdString A unique identifier for the location in code from which this originated.  It may be a universally unique identifier (UUID) or a friendly name such as “func someFunc()”.  It is generally preferrable to use a friendly name for public methods, whereas a UUID may be more appropriate for internal methods.
///
/// \param sourceClass The class which is the source for the call.
///
/// \param asyncBool A boolean indicating if this closure should be executed asynchronously.
///
/// \param printLogMessageBool A boolean indicating if a LogMessage should be printed.
///
/// \param closure The closure to execute (conditionally).
///
+ (void)executeForPublicEntryPointWithSourceIdString:(NSString * _Nullable)sourceIdString hostAPICallDiagnosticHeadlineString:(NSString * _Nullable)hostAPICallDiagnosticHeadlineString sourceClass:(Class _Nullable)sourceClass asyncBool:(BOOL)asyncBool printLogMessageBool:(BOOL)printLogMessageBool closure:(void (^ _Nullable)(void))closure;
/// Asynchronously dispatch and execute the provided closure providing standardized handling for the requirements of a public entry point.
/// This always uses the default dispatch queue (globalSerial dispatch queue).
/// \param dispatchQueue A dispatchQueue to use.  Will default to globalSerial if not provided.
///
/// \param sourceIdString A unique identifier for the location in code from which this originated.  It may be a universally unique identifier (UUID) or a friendly name such as “func someFunc()”.  It is generally preferrable to use a friendly name for public methods, whereas a UUID may be more appropriate for internal methods.
///
/// \param sourceClass The class which is the source for the call.
///
/// \param asyncBool A boolean indicating if this closure should be executed asynchronously.
///
/// \param printLogMessageBool A boolean indicating if a LogMessage should be printed.
///
/// \param closure The closure to execute (conditionally).
///
+ (void)executeWithDispatchQueue:(KVADispatchQueue * _Nullable)dispatchQueue sourceIdString:(NSString * _Nullable)sourceIdString hostAPICallDiagnosticHeadlineString:(NSString * _Nullable)hostAPICallDiagnosticHeadlineString sourceClass:(Class _Nullable)sourceClass asyncBool:(BOOL)asyncBool printLogMessageBool:(BOOL)printLogMessageBool closure:(void (^ _Nullable)(void))closure;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("KVAFile")
@interface KVAFile : NSObject
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which defines instruction which can be executed.
SWIFT_CLASS_NAMED("KVAInstruction")
@interface KVAInstruction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class KVALogLevel;
@class KVALogMessage;

/// A class which constitutes a log, which is a collection of log messages.
SWIFT_CLASS_NAMED("KVALog")
@interface KVALog : NSObject
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALog * _Nonnull shared;)
+ (KVALog * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The visible maximum log level for log messages.
@property (nonatomic, strong) KVALogLevel * _Nullable level;
/// A boolean indicating if log messages may be printed using os_log.
/// Default true.  When disabled, log messages will fall back to NSLog or Swift’s print.  NSLog and Swift’s print lack certain features which os_log has, but they may print in environments where os_log is not supported.
@property (nonatomic) BOOL osLogEnabledBool;
/// A boolean indicating if log messages should be pretty printed.
/// Default true.
@property (nonatomic) BOOL prettyPrintBool;
/// A boolean indicating if log messages should be separated by new line and then printed individually.
/// Default false.  This can be used to overcome truncation issues, but it will add message prefixes to the beginning of each line.
@property (nonatomic) BOOL printLinesIndividuallyBool;
/// A prefix string to be added to the beginning of each item printed to the log.
/// Default nil.  This can be set to a value such as “KVA: “ to make filtering log messages easier.  When this is used in conjunction with var <code>printLinesIndividuallyBool</code> this prefix will be printed at the beginning of each line.
@property (nonatomic, copy) NSString * _Nullable printPrefixString;
/// Return a copy of the logMessageArray.
/// The copy is made safely with synchronization.
- (NSArray<KVALogMessage *> * _Nullable)logMessageArray_copy SWIFT_WARN_UNUSED_RESULT;
@end


/// A class which defines a log level, with enumerated values.
SWIFT_CLASS_NAMED("KVALogLevel")
@interface KVALogLevel : NSObject
/// A log level which never prints visibly to the log.
/// When LogMessage(s) are not printed visibly to the log, they are still posted as notifications.  This enables all LogMessage(s) to be observed, regardless of their current visibility.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull never;)
+ (KVALogLevel * _Nonnull)never SWIFT_WARN_UNUSED_RESULT;
/// A log level for an error.
/// The definition of an error adopted by the SDK is anything which is essentially fatal.  This does not mean that there needs to be a crash, but that something failed unrecoverably.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull error;)
+ (KVALogLevel * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
/// A log level for a warning.
/// A warning is generally anything that behaved unexpectedly and should be brought to the developer’s attention.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull warn;)
+ (KVALogLevel * _Nonnull)warn SWIFT_WARN_UNUSED_RESULT;
/// A log level for a piece of general information.
/// General information is anything not rising to the level of a warning but also something that does not require you to be debugging a product to see.  This level should be viewed as to be used sparingly, as it is the default log level.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull info;)
+ (KVALogLevel * _Nonnull)info SWIFT_WARN_UNUSED_RESULT;
/// A log level for a piece of debug information.
/// Debug information is something helpful to illuminate what is happening, without going into the minutia.
/// note:
/// We previously used osLogType .debug here, but the result was that for some time log levels higher than info weren’t showing in Xamarin apps- even in the simulator.  We were able to see log messages in the “Console” app, but only for info or below.  From my research there seem to be known Apple bug(s) associated with this.  So, for now we’ve switched the osLogType here to .info.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull debug;)
+ (KVALogLevel * _Nonnull)debug SWIFT_WARN_UNUSED_RESULT;
/// A log level for a piece of trace information.
/// Trace information is the minutia of what is happening.  This information would clutter the logs, even when debugging, and so is intended to be used when trying to trace down an obscure problem.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull trace;)
+ (KVALogLevel * _Nonnull)trace SWIFT_WARN_UNUSED_RESULT;
/// A log level which always prints visibly to the log.
/// When the logLevel is .always and the visibleMaximumLogLevel resolves to .never, the visibleMaximumLogLevel will win, resulting in no visibility.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVALogLevel * _Nonnull always;)
+ (KVALogLevel * _Nonnull)always SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// The name.
/// Examples:  “never”, “error”, “warn”, “info”, “debug”, “trace”, “always”.
@property (nonatomic, readonly, copy) NSString * _Nonnull nameString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which defines a log message.
SWIFT_CLASS_NAMED("KVALogMessage")
@interface KVALogMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which defines a network transaction.
SWIFT_CLASS_NAMED("KVANetTransaction")
@interface KVANetTransaction : NSObject <KVANetworkingSetterProvider>
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// An instance of networking.
@property (nonatomic, weak) KVANetworking * _Nullable networking;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A queue of KVANetTransaction(s).
/// This class is a queue of KVANetTransaction(s) which exists for the purpose of holding transactions.  This queue is emptied as those transactions are completed.
SWIFT_CLASS_NAMED("KVANetTransactionQueue")
@interface KVANetTransactionQueue : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A network transaction type.
/// This generally corresponds to Kochava’s “action” key.
SWIFT_CLASS_NAMED("KVANetTransactionType")
@interface KVANetTransactionType : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The class KVANetworking provides basic networking support.
SWIFT_CLASS_NAMED("KVANetworking")
@interface KVANetworking : NSObject
/// Configure (update) the instance from another object.
/// This method is used to configure the instance.  It can be called from the host to override (or else default) various parameters.  The structure of the object you provide has the same capability as that which the server may return.  Additionally you can wrap the parameters you provide in objects $override$, $override.append$, $default$, or $default.append$, to indicate how these options are treated relative to the server’s options.
/// $override$:  Elements within this object will override any options of the same name specified by the server.
/// $override.append$:  Elements within this object will append/override any previously established $override$.  $override$ does not need to be used first.
/// $default$:  Elements within this object will serve as a default for any options of the same name when not specified by the server.
/// $default.append$:  Elements within this object will append/override any previously established $default$.  $default$ does not need to be used first.
/// \param object An object from which to configure the instance.  This is most commonly a JSON object.
///
/// \param context The context from which the object was provided.  In rare cases this may have some bearing on the proper interpretation of what was provided.
///
- (void)configureWith:(id _Nullable)object context:(KVAContext * _Nullable)context;
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Execute an advanced instruction.
/// \param identifierString An identifier for the advanced instruction.
///
/// \param valueObject A value object for the advanced instruction.
///
- (void)executeAdvancedInstructionWithIdentifierString:(NSString * _Nonnull)identifierString valueObject:(id _Nullable)valueObject;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// The class KVAPartner defines a partner in the context of managing user consent in relationship to GDPR.
/// When prompting for consent, the user should be presented with a list of the partners with which data would be shared.  That list can grow or contract independent of software version because data sharing can take place server-to-server.  With these partners being defined within your Kochava dashboard, changes can be made automatically, promptly, and across a range of software versions.
SWIFT_CLASS_NAMED("KVAPartner")
@interface KVAPartner : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Return a boolean indicating if this partner raises a need to prompt for consent.
/// Compare with shouldBeIncludedInPromptBool.
- (BOOL)shouldPromptBool SWIFT_WARN_UNUSED_RESULT;
/// Return a date indicating when the user did grant consent.
/// The returned value will be non-nil if the user’s last response was to grant consent, even if that consent is not currently still valid.  Compare with isGrantedBool.
- (NSDate * _Nullable)didGrantDate SWIFT_WARN_UNUSED_RESULT;
/// Return a three-state boolean indicating if consent is granted, declined, or not known.
/// This does not consider whether consent is required.
- (NSNumber * _Nullable)isGrantedBoolNumber SWIFT_WARN_UNUSED_RESULT;
/// Return a boolean indicating if consent is granted.
/// This is a two-state version of isGrantedBoolNumber.  This will return false when isGrantedBoolNumber is nil.
- (BOOL)isGrantedBool SWIFT_WARN_UNUSED_RESULT;
/// Return a date for when consent was granted.
/// If isGrantedBool, this returns responseDate.  If not, this returns nil.
- (NSDate * _Nullable)isGrantedDate SWIFT_WARN_UNUSED_RESULT;
/// A string containing a description of the partner.
/// This property is optional.  This may be presented to the user when prompting for consent.
/// Example: “Used to do X and Y.”
@property (nonatomic, readonly, copy) NSString * _Nullable descriptionString;
/// A string containing the name of the partner.
/// This may be presented to the user when prompting for consent.
/// Example: “Kochava”
@property (nonatomic, readonly, copy) NSString * _Nullable nameString;
/// A boolean indicating the user’s response.
/// A value of true indicates consent was granted.  A value of false indicates consent was denied.  A value of nil exists when the user has not provided a response.
@property (nonatomic, readonly, strong) NSNumber * _Nullable responseBoolNumber;
/// The date when the user did respond to consent.
/// This value is nil when the user has not provided a response.
@property (nonatomic, readonly, copy) NSDate * _Nullable responseDate;
@end



/// A controller for working with products.
SWIFT_CLASS_NAMED("KVAProductController")
@interface KVAProductController : NSObject
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVAProductController * _Nonnull shared;)
+ (KVAProductController * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Resets product(s).
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)products_resetWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
/// Resets product(s).
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param includeExternalBool A boolean indicating whether or not external variables should be deleted.  This is intended for testing purposes.  See func <code>reset(deleteLocalDataBool:)</code> which always supplies this parameter as false.
///
/// \param includeDeviceAppGroupBool A boolean indicating whether or not the deviceAppGroup user defaults should be deleted.  This is where App Clip data is stored.
///
/// \param printLogMessageBool A boolean indicating whether or not a log message should be printed consistent with a public entry point.
///
/// \param includeHostBool A boolean indicating if you want to include the host.  The host requires an explicit authorization through this boolean.
///
/// \param includeUIBool A boolean indicating if you want to include module KochavaUI.  Module KochavaUI requires an explicit authorization through this boolean.
///
/// \param includeCoreBool A boolean indicating if you want to include module KochavaCore.  Module KochavaCore requires an explicit authorization through this boolean.
///
/// \param moduleNameStringArray An array of modules to include.  Optional.  If this array is not set then all modules are allowed.  If this is set then only those products whose module names are in this array will be included.  If you set an ‘include’ parameter and also set any value in this array, the name of that ‘include’ parameter must still also be in this array to be included.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)products_resetWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool includeExternalBool:(BOOL)includeExternalBool includeDeviceAppGroupBool:(BOOL)includeDeviceAppGroupBool printLogMessageBool:(BOOL)printLogMessageBool includeHostBool:(BOOL)includeHostBool includeUIBool:(BOOL)includeUIBool includeCoreBool:(BOOL)includeCoreBool moduleNameStringArray:(NSArray<NSString *> * _Nullable)moduleNameStringArray closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
/// Shuts down product(s).
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)products_shutdownWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
/// Shuts down product(s).
/// \param deleteLocalDataBool A boolean indicating whether or not local data should be deleted.
///
/// \param includeHostBool A boolean indicating if you want to include the host.  The host requires an explicit authorization through this boolean.
///
/// \param includeUIBool A boolean indicating if you want to include module KochavaUI.  Module KochavaUI requires an explicit authorization through this boolean.
///
/// \param includeCoreBool A boolean indicating if you want to include module KochavaCore.  Module KochavaCore requires an explicit authorization through this boolean.
///
/// \param moduleNameStringArray An array of modules to include.  Optional.  If this array is not set then all modules are allowed.  If this is set then only those products whose module names are in this array will be included.  If you set an ‘include’ parameter and also set any value in this array, the name of that ‘include’ parameter must still also be in this array to be included.
///
/// \param closure_didComplete A closure which is called upon completion.
///
- (void)products_shutdownWithDeleteLocalDataBool:(BOOL)deleteLocalDataBool includeHostBool:(BOOL)includeHostBool includeUIBool:(BOOL)includeUIBool includeCoreBool:(BOOL)includeCoreBool moduleNameStringArray:(NSArray<NSString *> * _Nullable)moduleNameStringArray closure_didComplete:(void (^ _Nullable)(void))closure_didComplete;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which collects and/or adapts a string value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVAStringAdapter")
@interface KVAStringAdapter : KVAAdapter
@end


/// A class for working with system-level properties.
SWIFT_CLASS_NAMED("KVASystem")
@interface KVASystem : NSObject
/// The singleton shared instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVASystem * _Nonnull shared;)
+ (KVASystem * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// A shared instance, for convenience— optional.
/// See var <code>shared</code>.  This variable will be nil prior to the shared instance being defaulted.  This may be used to optionally invalidate any existing shared instance without causing it to first be defaulted in the process.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KVASystem * _Nullable shared_optional;)
+ (KVASystem * _Nullable)shared_optional SWIFT_WARN_UNUSED_RESULT;
/// A boolean indicating if the current host is an app clip.
/// This property will return a default value based on whether or not it can be detected that the host is an app clip.  It uses the bundle identifier and looks for the default suffix of “.Clip” (case insensitive).  If it finds that suffix then this value will default to true, otherwise false.  If this assumption is not accurate for the host, this value can be set explicitly.
@property (nonatomic) BOOL appClipBool;
/// A method which can be called to report that the active state should become true.
/// Calling this method is generally redundant when the host is an application, as this change is observed automatically.  But this method can and should be called in app extensions, such as iMessage apps, to notify when the state is reported to have become active.
- (void)stateActiveDidBecome;
/// A method which can be called to report that the active state should become true.
/// Calling this method is generally redundant when the host is an application, as this change is observed automatically.  But this method can and should be called in app extensions, such as iMessage apps, to notify when the state is reported to have become active.
/// \param sourceString A string which describes the source that is originating the state change.
///
- (void)stateActiveDidBecomeWithSourceString:(NSString * _Nonnull)sourceString;
/// A method which can be called to report that the active state should resign true.
/// Calling this method is generally redundant when the host is an application, as this change is observed automatically.  But this method can and should be called in app extensions, such as iMessage apps, to notify when the state is reported to have resigned active.
- (void)stateActiveWillResign;
/// A method which can be called to report that the active state should resign true.
/// Calling this method is generally redundant when the host is an application, as this change is observed automatically.  But this method can and should be called in app extensions, such as iMessage apps, to notify when the state is reported to have resigned active.
/// \param sourceString A string which describes the source that is originating the state change.
///
- (void)stateActiveWillResignWithSourceString:(NSString * _Nonnull)sourceString;
/// A constant to use as the source when reporting that a MessagesAppViewController did become active.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull messagesAppViewControllerDidBecomeActiveSourceString;)
+ (NSString * _Nonnull)messagesAppViewControllerDidBecomeActiveSourceString SWIFT_WARN_UNUSED_RESULT;
/// A constant to use as the source when reporting that a MessagesAppViewController did resign active.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull messagesAppViewControllerDidResignActiveSourceString;)
+ (NSString * _Nonnull)messagesAppViewControllerDidResignActiveSourceString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class for working with a low level system (sys/) functions.
/// This class is a higher-level wrapper for system (sys/) functions, such as sys/utsname.h
SWIFT_CLASS_NAMED("KVASystemLow")
@interface KVASystemLow : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which defines a high-level task.
SWIFT_CLASS_NAMED("KVATask")
@interface KVATask : NSObject <KVANetworkingSetterProvider>
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// An instance of networking.
@property (nonatomic, strong) KVANetworking * _Nullable networking;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class which collects and/or adapts a time interval value to a variety of contexts.
/// A primary use case of an adapter is to order the automatic collection of a value.  That value can then be adapted as needed for various contexts (see class <code>KVAContext</code>).
/// See base class <code>KVAAdapter</code> for more details.
SWIFT_CLASS_NAMED("KVATimeIntervalAdapter")
@interface KVATimeIntervalAdapter : KVANumberAdapter
@end


/// A class which defines a series of time intervals, which express a waterfall pattern.
SWIFT_CLASS_NAMED("KVATimeIntervalSeries")
@interface KVATimeIntervalSeries : NSObject <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class which wraps a timer with an advanced and high-level interface.
SWIFT_CLASS_NAMED("KVATimer")
@interface KVATimer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A high-level wrapper for a value, along with its associated meta value(s).
SWIFT_CLASS_NAMED("KVAValue")
@interface KVAValue : NSObject
/// Return a description of the instance.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NSArray<ObjectType> (SWIFT_EXTENSION(KochavaCore))
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Create an instance from another object, allowing for the elementClass to be explictly specified.
/// \param object An object from which to create the instance.  This is expected to be an NSArray.  The elements inside may be native class objects or may be other representations which can be resolved to native class objects.
///
/// \param elementClass The class of the element(s).
///
+ (nullable instancetype)kva_from:(id _Nullable)object elementClass:(Class _Nullable)elementClass initializedObject:(id _Nullable)initializedObject SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSData (SWIFT_EXTENSION(KochavaCore))
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSDate (SWIFT_EXTENSION(KochavaCore))
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end



@interface NSDictionary<KeyType, ObjectType> (SWIFT_EXTENSION(KochavaCore))
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface NSNumber (SWIFT_EXTENSION(KochavaCore))
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(KochavaCore))
/// Return a json string serialized from a json object.
/// \param prettyPrintBool A boolean indicating whether you want the json to be pretty printed.  Pretty printing involves adding carriage returns, indentation, etc.  It generally makes it more human readable but increases the total bytes.
///
///
/// returns:
/// A formatted string.
+ (NSString * _Nullable)kva_stringFromJSONObject:(id _Nullable)jsonObject prettyPrintBool:(BOOL)prettyPrintBool SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)kva_from:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// Return a JSON object, assuming that the string represents JSON.
- (id _Nullable)kva_serializedJSONObjectWithPrintErrorsBool:(BOOL)printErrorsBool SWIFT_WARN_UNUSED_RESULT;
@end



@interface NSUserDefaults (SWIFT_EXTENSION(KochavaCore))
/// Return a properly formatted key name.
/// This will take an identifierString such as “someIdentifierString” and with a storageIdString such as “someStorageIdString”, turn it into something like the following:  com.kochava.KochavaTracker.someIdentifierString.someStorageIdString.  The reason why we are placing the storage id at the end, as opposed to before the identifierString, is because our legacy persisted values never had this key segment.  Inserting one at that location would cause the keys to be sorted inconsistently when compared against a nil value.  By placing it at the end, the order will be consistent, although interlaced.
/// \param prefixString A prefix for the key.  Example: “com.kochava.KochavaTracker”.
///
/// \param identifierString An identifier string.  Example: “ClassName.fieldName”.
///
/// \param storageIdString An optional storage identifier string.  Example: “Two”, or nil.
///
+ (NSString * _Nonnull)kva_keyNameStringWithPrefixString:(NSString * _Nullable)prefixString identifierString:(NSString * _Nullable)identifierString storageIdString:(NSString * _Nullable)storageIdString SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
